        dbc.Row([
        dbc.Col([
            dbc.Card([
                dbc.CardBody([
                    dcc.Store(id='filtered-data-melting'),  # 用於緩存 Melting Loss 資料
                    dcc.Store(id='filtered-data-finishing'),  # 用於緩存 Finishing Loss 資料
                    dcc.Graph(
                        id="combined-graph",
                        style={"height": "500px"},
                    ),
                ]),
            ], className="mb-3"),
        ], width=11),
    ]),

@app.callback(
    [Output("filtered-data-melting", "data"),
     Output("filtered-data-finishing", "data")],
    [Input("date-picker", "value"),
     Input("tank-picker", "value")]
)
def query_data(date_range, tank):
    if not date_range or not tank:
        raise PreventUpdate  # 如果条件不完整，则不触发查询

    conn_str = "Provider=MSOLAP;Data Source=cgtppd;Catalog=ppd;"
    start_date, end_date = map(pd.to_datetime, date_range)

    # 查询 Melting Loss 数据
    query_m = f"""
        SELECT 
            NON EMPTY {{ [Measures].[M_Defect Loss%] }} ON COLUMNS, 
            NON EMPTY {{ ([Time Crate].[CR_Time YQMD].[CR_Date].ALLMEMBERS * 
                             [Tank].[Tank ID].&[{tank}] *
                             [Defect Tracking].[Defect ID].[Defect ID].ALLMEMBERS) }} 
               DIMENSION PROPERTIES MEMBER_CAPTION, MEMBER_UNIQUE_NAME 
        ON ROWS 
        FROM ( 
            SELECT ({{ [Time Crate].[CR_Date].&[{start_date.strftime("%Y-%m-%dT00:00:00")}] : 
                         [Time Crate].[CR_Date].&[{end_date.strftime("%Y-%m-%dT00:00:00")}] }}) 
            ON COLUMNS 
            FROM [PPD_Actual]
        ) 
        WHERE ( [Defect Tracking].[Defect Group].&[M_Melt Loss] ) 
        CELL PROPERTIES VALUE, BACK_COLOR, FORE_COLOR, FORMATTED_VALUE, FORMAT_STRING, FONT_NAME, FONT_SIZE, FONT_FLAGS
    """

    # 查询 Finishing Loss 数据
    query_f = f"""
        SELECT NON EMPTY {{ [Measures].[F_Defect Loss%] }} ON COLUMNS, 
               NON EMPTY {{ ([Time Crate].[CR_Time YQMD].[CR_Date].ALLMEMBERS * 
                             [Tank].[Tank ID].&[{tank}] *
                             [Defect Tracking].[Defect ID].[Defect ID].ALLMEMBERS) }} 
               DIMENSION PROPERTIES MEMBER_CAPTION, MEMBER_UNIQUE_NAME 
        ON ROWS 
        FROM ( 
            SELECT ({{ [Time Crate].[CR_Date].&[{start_date.strftime("%Y-%m-%dT00:00:00")}] : 
                         [Time Crate].[CR_Date].&[{end_date.strftime("%Y-%m-%dT00:00:00")}] }}) 
            ON COLUMNS 
            FROM [PPD_Actual]
        ) 
        WHERE ( [Time Crate].[CR_Date].CurrentMember ) 
        CELL PROPERTIES VALUE, BACK_COLOR, FORE_COLOR, FORMATTED_VALUE, FORMAT_STRING, FONT_NAME, FONT_SIZE, FONT_FLAGS
    """

    try:
        # 查询 Melting Loss 数据
        with Pyadomd(conn_str) as conn:
            with conn.cursor().execute(query_m) as cur:
                df_m = pd.DataFrame(cur.fetchall(), columns=[col.name for col in cur.description])
        # 查询 Finishing Loss 数据
        with Pyadomd(conn_str) as conn:
            with conn.cursor().execute(query_f) as cur:
                df_f = pd.DataFrame(cur.fetchall(), columns=[col.name for col in cur.description])
        # 数据清理
        df_cleaned_M = clean_data(df_m)
        df_cleaned_F = clean_data(df_f)
        # 将数据转换为字典格式返回
        return df_cleaned_M.to_dict("records"), df_cleaned_F.to_dict("records")

    except Exception as e:
        print("Error occurred during query execution:")
        print(e)
        return [], []

@app.callback(
    Output("combined-graph", "figure"),
    [Input("tags", "value"),
     Input("date-picker", "value"),
     Input("interval", "value"),
     Input("tank-picker", "value"),
     Input("loss-type", "value"),
     Input("defect-picker", "value"),
     Input("pi-y-axis-setting", "value")],  # 新增 Y 軸模式輸入
    [State("filtered-data-melting", "data"),  # 輸入 Melting 數據
     State("filtered-data-finishing", "data")]  # 輸入 Finishing 數據
)
def update_combined_graph(tags, date_range, interval, tank, loss_type, defect, pi_y_axis_mode, 
                          data_melting, data_finishing):
    fig = go.Figure()

    if not date_range or len(date_range) != 2 or not tank:
        raise PreventUpdate  # 如果輸入條件不足，則不更新圖表

    start_date, end_date = map(pd.to_datetime, date_range)

    # 將輸入的字典格式數據轉換為 DataFrame
    df_cleaned_M = pd.DataFrame(data_melting) if data_melting else pd.DataFrame()
    df_cleaned_F = pd.DataFrame(data_finishing) if data_finishing else pd.DataFrame()
    
    # 根據 loss_type 合併數據
    if loss_type in ['melting', 'finishing', 'melting+finishing']:
        if loss_type == 'melting':
            filtered_df = df_cleaned_M[
                (df_cleaned_M["CR_Date"] >= start_date) &
                (df_cleaned_M["CR_Date"] <= end_date) &
                (df_cleaned_M["Tank ID"] == tank)
            ]
        elif loss_type == 'finishing':
            filtered_df = df_cleaned_F[
                (df_cleaned_F["CR_Date"] >= start_date) &
                (df_cleaned_F["CR_Date"] <= end_date) &
                (df_cleaned_F["Tank ID"] == tank)
            ]
        elif loss_type == 'melting+finishing':
            filtered_df_melting = df_cleaned_M[
                (df_cleaned_M["CR_Date"] >= start_date) &
                (df_cleaned_M["CR_Date"] <= end_date) &
                (df_cleaned_M["Tank ID"] == tank)
            ]
            filtered_df_finishing = df_cleaned_F[
                (df_cleaned_F["CR_Date"] >= start_date) &
                (df_cleaned_F["CR_Date"] <= end_date) &
                (df_cleaned_F["Tank ID"] == tank)
            ]
            filtered_df = pd.concat([filtered_df_melting, filtered_df_finishing])
    else:
        return fig  # 如果 loss_type 無效，返回空圖表
        # 繪製 Defect
    if defect:
        final_df = filtered_df[filtered_df['Defect ID'].isin(defect)]
        for selected_defect in defect:
            df_defect = final_df[final_df['Defect ID'] == selected_defect]
            loss_column = (
                "M_Defect Loss%" if selected_defect in df_cleaned_M["Defect ID"].unique()
                else "F_Defect Loss%"
            )
            fig.add_trace(go.Bar(
                x=df_defect["CR_Date"],
                y=df_defect[loss_column],
                name=selected_defect,
                marker_color=defect_colors.get(selected_defect)
            ))
        fig.update_layout(barmode='stack')
    else:
        pass


    # 如果有選擇 PI tags 且有日期範圍，則提取並繪製 PI 數據
    if tags and start_date and end_date:
        servername = "grape"  # 設定 PI 伺服器名稱
        with PI.PIServer(server=servername) as server:
            points = server.search(tags)  # 搜尋所選的 PI tags
            if len(points) > 0:
                series = []
                for p in points:
                    # 使用選擇的頻率取樣數據
                    sampling_interval = '30m'  # 默認為 30 分鐘
                    if interval == 'd':
                        sampling_interval = '30m'
                    elif interval == 'h':
                        sampling_interval = '30m'
                    elif interval == '5m':
                        sampling_interval = '5m'  # 若選擇 "5m" 則設置為 5 分鐘
                    elif interval == '1m':
                        sampling_interval = '1m'  # 若選擇 "1m" 則設置為 1 分鐘

                    data = p.interpolated_values(
                        start_time=start_date,
                        end_time=end_date,
                        interval=sampling_interval
                    )
                    
                    # 將數據轉換為 DataFrame 並重新設置索引
                    interpolated_data = pd.DataFrame(data).reset_index()
                    interpolated_data.columns = ['Timestamp', p.name]
                    
                    # 將非數字型資料轉換為 None
                    def convert_to_numeric(val):
                        try:
                            return float(val)
                        except (ValueError, TypeError):
                            return None  # 如果無法轉換，返回 None
                    
                    interpolated_data[p.name] = interpolated_data[p.name].apply(convert_to_numeric)
                    interpolated_data['Timestamp'] = pd.to_datetime(interpolated_data['Timestamp'])
                    interpolated_data.set_index('Timestamp', inplace=True)

                    # 根據使用者選擇的 interval 將數據重新取樣
                    if interval == 'd':  # 若選擇每日資料
                        resampled_data = interpolated_data.resample('1D').mean()
                    elif interval == 'h':  # 若選擇每小時資料
                        resampled_data = interpolated_data.resample('1H').mean()
                    elif interval == '5m':  # 若選擇5m資料
                        resampled_data = interpolated_data.resample('5min').mean()
                    else:  # 否則1m
                        resampled_data = interpolated_data

                    series.append(resampled_data)  # 將每個 Tag 的數據加入 series 清單

                # 合併所有 PI tags 數據
                df = pd.concat(series, axis=1)
                print(df)
                df.to_excel('PI.xlsx', index=False)

                # 設定顏色循環，避免顏色數量限制
                color_idx = 0
                for idx, tag in enumerate(tags):
                    if tag in df.columns:
                        # 判斷 defect 是否為空
                        if not defect:
                            # 無選擇 defect：第一個 tag 使用主 Y 軸，其餘 tags 疊加到額外 Y 軸
                            # 添加 Y 軸設置根據選擇切換
                            if pi_y_axis_mode == 'single':
                                fig.add_trace(go.Scatter(
                                    x=df.index,
                                    y=df[tag],
                                    mode='lines',
                                    name=tag,
                                    line=dict(color=color_palette[color_idx % len(color_palette)]),
                                    yaxis='y2',  # 主 Y 軸
                                ))
                                fig.update_layout(
                                    yaxis2=dict(
                                    side='right',
                                    position=1,
                                    tickfont=dict(color='black'),
                                ))
                            elif pi_y_axis_mode == 'multiple':
                                if idx == 0:
                                    fig.add_trace(go.Scatter(
                                        x=df.index,
                                        y=df[tag],
                                        mode='lines',
                                        name=tag,
                                        line=dict(color=color_palette[color_idx % len(color_palette)]),
                                        yaxis='y',  # 主 Y 軸
                                    ))
                                    fig.update_layout(yaxis=dict(
                                            title=tag,
                                            side='right',
                                            position=1,
                                            titlefont=dict(color=color_palette[color_idx % len(color_palette)]),
                                            tickfont=dict(color=color_palette[color_idx % len(color_palette)]),
                                        ))
                                else:
                                    fig.add_trace(go.Scatter(
                                        x=df.index,
                                        y=df[tag],
                                        mode='lines',
                                        name=tag,
                                        line=dict(color=color_palette[color_idx % len(color_palette)]),
                                        yaxis=f'y{idx+1}',  # 額外 Y 軸
                                    ))
                                    fig.update_layout(
                                        **{f'yaxis{idx+1}': dict(
                                            overlaying='y',  # 疊加到主 Y 軸
                                            side='right' ,
                                            position=0.96 - 0.04 * (idx - 1),  # 計算位置
                                            titlefont=dict(color=color_palette[color_idx % len(color_palette)]),
                                            tickfont=dict(color=color_palette[color_idx % len(color_palette)]),
                                        )})
                            elif pi_y_axis_mode == 'autoscale':
                                    fig.add_trace(go.Scatter(x=df.index, 
                                        y=df[tag], 
                                        mode='lines', 
                                        name=tag,
                                        line=dict(color=color_palette[color_idx % len(color_palette)]),  
                                        yaxis=f'y{idx+1}'))

                                    # 設定額外的 Y 軸屬性
                                    fig.update_layout(
                                        **{f'yaxis{idx+1}': dict(
                                            domain=[(len(tags) - (idx+2)) / len(tags), ((len(tags)+1) - (idx+2)) / len(tags)],
                                            titlefont=dict(color=color_palette[color_idx % len(color_palette)]),
                                            tickfont=dict(color=color_palette[color_idx % len(color_palette)]),
                                            anchor="free",
                                            side="right",
                                            position=1
                                        )}
                                    )
                        else:
                            if pi_y_axis_mode == 'single':
                                fig.add_trace(go.Scatter(
                                    x=df.index,
                                    y=df[tag],
                                    mode='lines',
                                    name=tag,
                                    line=dict(color=color_palette[color_idx % len(color_palette)]),
                                    yaxis='y2',  # 主 Y 軸
                                ))
                                fig.update_layout(
                                    yaxis2=dict(
                                    overlaying='y',
                                    side='right',
                                    position=1,
                                    tickfont=dict(color='black'),
                                ))
                            elif pi_y_axis_mode == 'multiple':                           
                                # 有選擇 defect：所有 tags 疊加到額外 Y 軸
                                fig.add_trace(go.Scatter(
                                    x=df.index,
                                    y=df[tag],
                                    mode='lines',
                                    name=tag,
                                    line=dict(color=color_palette[color_idx % len(color_palette)]),
                                    yaxis=f'y{idx+2}',  # 額外 Y 軸
                                ))
                                fig.update_layout(
                                    **{f'yaxis{idx+2}': dict(
                                        overlaying='y',  # 疊加到主 Y 軸
                                        side='right',
                                        position=1 - 0.04 * idx,  # 計算位置
                                        titlefont=dict(color=color_palette[color_idx % len(color_palette)]),
                                        tickfont=dict(color=color_palette[color_idx % len(color_palette)]),
                                    )}
                                )
                        color_idx += 1  # 更新顏色索引

    # 計算總共的 Y 軸數量
    total_y_axes = len(tags) if tags else 1  # 預設至少有主 Y 軸

    # 動態調整 X 軸 domain（減少退縮範圍）
    x_domain_end = 1 if pi_y_axis_mode == 'single' else 1- ((total_y_axes - 1) * 0.04) 

    # 計算選擇的 defect 數量
    defect_count = len(defect) if defect else 0

    # 動態調整頂部邊距 (預設 90，額外增加 10 像素 * 每 3 個 defect)
    top_margin = 90 + 20 * (total_y_axes //2 ) + 20 * (defect_count // 2)

    # 更新圖表的佈局和標題
    fig.update_layout(
        showlegend=True,
        title=f'{tank} Inclusion loss and Process Chart' if defect else f'{tank} Process Chart',
        xaxis=dict(
            domain=[0, x_domain_end],  # 動態設定 X 軸的 domain 範圍
            tickformat='%Y-%m-%d\n%H:%M:%S',
            title='Date'
        ),
        yaxis=dict(tickformat='.2%', title='loss%') if defect else dict(tickformat='f', title='Value'),
        height=500,
        margin=dict(
            b=0, 
            l=0, 
            r=90 + (total_y_axes / 3) * 30,  # 動態增加右邊邊距，避免軸標題擁擠
            t=top_margin  # 頂部邊距根據 defect 數量動態調整
        ),
        dragmode='zoom',
        legend=dict(
            orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1
        ),
        )

    return fig  # 回傳更新後的圖表





if __name__ == '__main__':
    app.run_server(debug=True, port='8888')
