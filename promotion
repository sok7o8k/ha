@app.callback(
    Output("combined-graph", "figure"),
    [Input("tags", "value"),
     Input("date-picker", "value"),
     Input("interval", "value"),
     Input("tank-picker", "value"),
     Input("loss-type", "value"),
     Input("defect-picker", "value"),
     Input("pi-y-axis-setting", "value")],  # 新增 Y 軸模式輸入
    [State("filtered-data-melting", "data"),  # 輸入 Melting 數據
     State("filtered-data-finishing", "data")]  # 輸入 Finishing 數據
)
def update_combined_graph(tags, date_range, interval, tank, loss_type, defect, pi_y_axis_mode, 
                          data_melting, data_finishing):
    fig = go.Figure()

    if not date_range or len(date_range) != 2 or not tank:
        raise PreventUpdate  # 如果輸入條件不足，則不更新圖表

    start_date, end_date = map(pd.to_datetime, date_range)

    # 將輸入的字典格式數據轉換為 DataFrame
    df_cleaned_M = pd.DataFrame(data_melting) if data_melting else pd.DataFrame()
    df_cleaned_F = pd.DataFrame(data_finishing) if data_finishing else pd.DataFrame()

    # 根據 loss_type 合併數據
    if loss_type in ['melting', 'finishing', 'melting+finishing']:
        if loss_type == 'melting':
            filtered_df = df_cleaned_M[
                (df_cleaned_M["CR_Date"] >= start_date) &
                (df_cleaned_M["CR_Date"] <= end_date) &
                (df_cleaned_M["Tank ID"] == tank)
            ]
        elif loss_type == 'finishing':
            filtered_df = df_cleaned_F[
                (df_cleaned_F["CR_Date"] >= start_date) &
                (df_cleaned_F["CR_Date"] <= end_date) &
                (df_cleaned_F["Tank ID"] == tank)
            ]
        elif loss_type == 'melting+finishing':
            filtered_df_melting = df_cleaned_M[
                (df_cleaned_M["CR_Date"] >= start_date) &
                (df_cleaned_M["CR_Date"] <= end_date) &
                (df_cleaned_M["Tank ID"] == tank)
            ]
            filtered_df_finishing = df_cleaned_F[
                (df_cleaned_F["CR_Date"] >= start_date) &
                (df_cleaned_F["CR_Date"] <= end_date) &
                (df_cleaned_F["Tank ID"] == tank)
            ]
            filtered_df = pd.concat([filtered_df_melting, filtered_df_finishing])
    else:
        return fig  # 如果 loss_type 無效，返回空圖表

    # 繪製 Defect 數據
    if defect:
        final_df = filtered_df[filtered_df['Defect ID'].isin(defect)]
        for selected_defect in defect:
            df_defect = final_df[final_df['Defect ID'] == selected_defect]
            loss_column = (
                "M_Defect Loss%" if selected_defect in df_cleaned_M["Defect ID"].unique()
                else "F_Defect Loss%"
            )
            fig.add_trace(go.Bar(
                x=df_defect["CR_Date"],
                y=df_defect[loss_column],
                name=selected_defect,
                marker_color=defect_colors.get(selected_defect, "blue")  # 預設顏色為藍色
            ))
        fig.update_layout(barmode='stack')
    else:
        # 如果未選擇 Defect，則返回空圖表或顯示提示
        fig.update_layout(
            title="No Defect Selected",
            xaxis_title="Date",
            yaxis_title="Loss %",
        )

    # 根據 pi_y_axis_mode 設置 Y 軸比例
    fig.update_yaxes(type="linear" if pi_y_axis_mode == "linear" else "log")

    return fig
