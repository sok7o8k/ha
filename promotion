app.layout = dbc.Container([
    dbc.Row([
        dbc.Col([
            dbc.Card([
                dbc.CardHeader("選擇日期"),
                dbc.CardBody([
                    dmc.DateRangePicker(
                        id='date-picker',
                        minDate=df_cleaned['CR_Date'].min().strftime('%Y-%m-%d'),
                        maxDate=(datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d'),
                        value=[
                            (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d'),
                            (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')
                        ],
                        label="日期範圍",
                        fullWidth=True
                    ),
                ])
            ], className="mb-3"),
            # 其餘部分保持不變
        ], width=4),
    ]),
    # 其餘部分保持不變
])


@app.callback(
    Output("combined-graph", "figure"),
    Input("tags", "value"),
    Input("date-picker", "value"),  # 接收選擇的日期範圍
    Input("interval", "value"),
    Input("tank-picker", "value"),
)
def update_combined_graph(tags, date_range, interval, tank):
    # date_range 是列表 [start_date, end_date]
    start_date = pd.to_datetime(date_range[0])
    end_date = pd.to_datetime(date_range[1])
    
    # 其餘邏輯保持不變
    filtered_df = df_cleaned[
        (pd.to_datetime(df_cleaned["CR_Date"]) >= start_date) &
        (pd.to_datetime(df_cleaned["CR_Date"]) <= end_date) &
        (df_cleaned["Tank ID"] == tank)
    ]

    # 其餘邏輯保持不變
