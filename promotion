@app.callback(
    Output("combined-graph", "figure"),
    Input("tags", "value"),
    Input("date-picker", "start_date"),
    Input("date-picker", "end_date"),
    Input("interval", "value"),
    Input("tank-picker", "value"),
)
def update_combined_graph(tags, start_date, end_date, interval, tank):
    # 預定義固定顏色列表
    color_palette = px.colors.qualitative.Plotly  # 可換成其他配色，如 Viridis, Dark2 等
    tag_colors = {tag: color_palette[i % len(color_palette)] for i, tag in enumerate(tags)}

    fig = go.Figure()

    # 同樣的數據處理邏輯...
    if tags and start_date and end_date:
        servername = "grape"
        with PI.PIServer(server=servername) as server:
            points = server.search(tags)
            series = []
            for p in points:
                # 提取數據
                data = p.interpolated_values(
                    start_time=pd.to_datetime(start_date),
                    end_time=pd.to_datetime(end_date),
                    interval="30m",
                )
                interpolated_data = pd.DataFrame(data).reset_index()
                interpolated_data.columns = ["Timestamp", p.name]
                interpolated_data["Timestamp"] = pd.to_datetime(interpolated_data["Timestamp"])
                interpolated_data.set_index("Timestamp", inplace=True)

                # 重新取樣
                if interval == "d":
                    resampled_data = interpolated_data.resample("1D").mean()
                elif interval == "h":
                    resampled_data = interpolated_data.resample("1H").mean()
                else:
                    resampled_data = interpolated_data
                series.append(resampled_data)

            df = pd.concat(series, axis=1)

            # 根據 tags 繪圖
            for tag in tags:
                if tag in df.columns:
                    fig.add_trace(
                        go.Scatter(
                            x=df.index,
                            y=df[tag],
                            mode="lines",
                            name=tag,
                            line=dict(color=tag_colors[tag]),  # 使用固定顏色
                        )
                    )

    # 更新圖表佈局
    fig.update_layout(
        title=f"{tank} Performance and Process trend",
        xaxis=dict(title="Date"),
        yaxis=dict(title="Value"),
        height=500,
        legend=dict(orientation="h", y=1.02, x=1, xanchor="right", yanchor="bottom"),
    )
    return fig
