@app.callback(
    [Output("defect-picker", "options"),  # 更新 defect-picker 的選項
     Output("defect-picker", "value")],  # 更新 defect-picker 的預設值
    [Input("loss-type", "value"),         # 當 loss-type 改變時觸發
     Input("tank-picker", "value"),       # 當 tank 改變時也觸發
     Input("date-picker", "value")],      # 當日期範圍改變時觸發
    [State("filtered-data-melting", "data"),  # 輸入 melting 數據
     State("filtered-data-finishing", "data")]  # 輸入 finishing 數據
)
def update_defect_picker(loss_type, tank, date_range, data_melting, data_finishing):
    if not date_range or len(date_range) != 2 or not tank:
        return [], []  # 如果輸入不完整，返回空選項和清空選擇

    start_date, end_date = map(pd.to_datetime, date_range)

    # 將輸入的字典格式數據轉換為 DataFrame
    df_cleaned_M = pd.DataFrame(data_melting) if data_melting else pd.DataFrame()
    df_cleaned_F = pd.DataFrame(data_finishing) if data_finishing else pd.DataFrame()

    # 根據 loss_type 合併數據
    if loss_type == 'melting+finishing':
        filtered_df_melting = df_cleaned_M[
            (df_cleaned_M["Tank ID"] == tank) &
            (df_cleaned_M["CR_Date"] >= start_date) &
            (df_cleaned_M["CR_Date"] <= end_date)
        ]
        filtered_df_finishing = df_cleaned_F[
            (df_cleaned_F["Tank ID"] == tank) &
            (df_cleaned_F["CR_Date"] >= start_date) &
            (df_cleaned_F["CR_Date"] <= end_date)
        ]
        filtered_df = pd.concat([filtered_df_melting, filtered_df_finishing])
    elif loss_type == 'melting':
        filtered_df = df_cleaned_M[
            (df_cleaned_M["Tank ID"] == tank) &
            (df_cleaned_M["CR_Date"] >= start_date) &
            (df_cleaned_M["CR_Date"] <= end_date)
        ]
    elif loss_type == 'finishing':
        filtered_df = df_cleaned_F[
            (df_cleaned_F["Tank ID"] == tank) &
            (df_cleaned_F["CR_Date"] >= start_date) &
            (df_cleaned_F["CR_Date"] <= end_date)
        ]
    else:
        return [], []

    # 獲取唯一的 Defect ID 選項
    all_defects = filtered_df["Defect ID"].dropna().unique()
    defect_options = [{"label": defect, "value": defect} for defect in all_defects]

    # 默認選中所有 Defect
    default_values = list(all_defects)

    return defect_options, default_values
