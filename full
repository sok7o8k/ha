from sys import path
import plotly.graph_objects as go
import plotly.express as px
from dash import Dash, html, dcc, Input, Output, State, dash_table
import dash_bootstrap_components as dbc
from dash.exceptions import PreventUpdate
import pandas as pd
import PIconnect as PI
from datetime import datetime, timedelta

PI.PIConfig.DEFAULT_TIMEZONE = "Asia/Taipei"

path.append(
    "C:\\Users\\chenk23\\Desktop\\DT2\\20240507\\03_Databases"
)  # added to the path BEFORE importing the pyadomd package

from pyadomd import Pyadomd
import pandas as pd
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output, State
import dash_mantine_components as dmc

app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP, dbc.icons.BOOTSTRAP])

app.layout = dbc.Container([
    dbc.Row([
        dbc.Col([
            dbc.Card([
                dbc.CardHeader("選擇日期"),
                dbc.CardBody([
                    dmc.DateRangePicker(
                        id='date-picker',
                        minDate='2009-01-01',
                        maxDate=(datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d'),
                        value=[
                            (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d'),
                            (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')
                        ],
                        label="日期範圍",
                        fullWidth=True
                    ),
                    dcc.RadioItems(
                        id='date-shortcuts',
                        options=[
                            {'label': '-1 year', 'value': '1Y'},
                            {'label': '-6 months', 'value': '6M'},
                            {'label': '-1 month', 'value': '1M'},
                            {'label': '-7 days', 'value': '7D'},
                        ],
                        value='1M',  
                        labelStyle={'display': 'inline-block', 'margin-right': '10px'},
                        className="mb-3"
                    ),
                ])
            ], className="mb-3"),
            dbc.Card([
                dbc.CardHeader("選擇Tank"),
                dbc.CardBody([
                    dcc.Dropdown(
                        id='tank-picker',
                        options=[{'label': f'TC{str(i).zfill(2)}', 'value': f'TC{str(i).zfill(2)}'} for i in range(1,22)],
                        value=[]
                    ),
                ]),
            ], className="mb-3"),
            dbc.Card([
                dbc.CardHeader("選擇 Loss 類型"),
                dbc.CardBody([
                    dbc.RadioItems(
                        id='loss-type',
                        options=[
                            {'label': 'Melting Loss', 'value': 'melting'},
                            {'label': 'Finishing Loss', 'value': 'finishing'},
                            {'label': 'Melting + Finishing loss', 'value': 'melting+finishing'}
                        ],
                        value=[],  # 預設值為 melting
                        inline=True,
                        className="mb-3"
                    ),
                ]),
            ], className="mb-3"),
            dbc.Card([
                dbc.CardHeader("選擇Defect"),
                dbc.CardBody([
                    dcc.Dropdown(
                        id="defect-picker",
                        multi=True,  # 支持多選
                        options=[],  # 初始為空，通過 callback 動態更新
                        value=[]     # 初始值為空，通過 callback 動態更新
                    ),
                ]),
            ], className="mb-3"),
        ], width=5),
    ]),
    dbc.Row([
    dbc.Col([
        dbc.Card([
            dbc.CardHeader("選擇Pi Data取值頻率"),
            dbc.CardBody([
                dbc.RadioItems(
                    options=[
                        {"label": "Daily", "value": "d"},
                        {"label": "Hourly", "value": "h"},
                        {"label": "5min", "value": "5m"},
                        {"label": "1min", "value": "1m"}
                    ],
                    value="d",
                    inline=True,
                    id="interval",
                    className="mb-3",
                ),
            ]),
        ], className="mb-3"),
    ], width=5),
    ]),
    dbc.Row([
    dbc.Col([
        dbc.Card([
            dbc.CardHeader("選擇PI Tags"),
            dbc.CardBody([
                html.Div([
                    dcc.Dropdown(
                        options=[],
                        multi=True,
                        id="tags",
                        className="mb-3",
                    ),
                ]),
            ]),
        ], className="mb-3"),
    ], width=5),
    ]),
    dbc.Row([
    dbc.Col([
        dbc.Card([
            dbc.CardHeader("Pi data Y軸設定"),
            dbc.CardBody([
                html.Div([
                    dcc.RadioItems(
                        id="pi-y-axis-setting",
                        options=[
                            {'label': 'Single', 'value': 'single'},
                            {'label': 'Multiple', 'value': 'multiple'},
                            {'label': 'Autoscale', 'value': 'autoscale'}
                        ],
                        value='multiple',  # 預設為 multiple 模式
                        labelStyle={'display': 'inline-block', 'margin-right': '10px'},
                        style={'margin-bottom': '10px'}
                    ),
                ]),
            ]),
        ], className="mb-3"),
    ], width=5),
    ]),
        dbc.Row([
        dbc.Col([
            dbc.Card([
                dbc.CardBody([
                    dcc.Store(id='filtered-data-melting', data=[]),  # 用於緩存 Melting Loss 資料
                    dcc.Store(id='filtered-data-finishing', data=[]),  # 用於緩存 Finishing Loss 資料
                    dcc.Graph(
                        id="combined-graph",
                        style={"height": "500px"},
                    ),
                ]),
            ], className="mb-3"),
        ], width=11),
    ]),
])

def clean_data(df):
    """
    清理 DataFrame 的欄位名稱和數據格式。
    
    :param df: 原始 DataFrame
    :return: 清理後的 DataFrame
    """
    # 去掉 "[MEMBER_UNIQUE_NAME]" 結尾的欄位
    df_cleaned = df.loc[:, [c for c in df.columns if not c.endswith("[MEMBER_UNIQUE_NAME]")]]
    
    # 去掉欄位中的 "[MEMBER_CAPTION]" 後綴
    df_cleaned.columns = [c[:-17] if c.endswith("[MEMBER_CAPTION]") else c for c in df_cleaned.columns]
    
    # 提取欄位名稱的主體部分
    df_cleaned.columns = [c.split(".")[-1][1:-1] for c in df_cleaned.columns]
    
    # 確保日期列是 datetime 格式（如果存在 'CR_Date' 欄位）
    if 'CR_Date' in df_cleaned.columns:
        df_cleaned['CR_Date'] = pd.to_datetime(df_cleaned['CR_Date'], errors='coerce')
    
    return df_cleaned

@app.callback(
    [Output("filtered-data-melting", "data"),
     Output("filtered-data-finishing", "data")],
    [Input("date-picker", "value"),
     Input("tank-picker", "value")]
)
def query_data(date_range, tank):
    if not date_range or not tank:
        raise PreventUpdate  # 如果条件不完整，则不触发查询

    conn_str = "Provider=MSOLAP;Data Source=cgtppd;Catalog=ppd;"
    start_date, end_date = map(pd.to_datetime, date_range)

    # 查询 Melting Loss 数据
    query_m = f"""
        SELECT 
            NON EMPTY {{ [Measures].[M_Defect Loss%] }} ON COLUMNS, 
            NON EMPTY {{ ([Time Crate].[CR_Time YQMD].[CR_Date].ALLMEMBERS * 
                             [Tank].[Tank ID].&[{tank}] *
                             [Defect Tracking].[Defect ID].[Defect ID].ALLMEMBERS) }} 
               DIMENSION PROPERTIES MEMBER_CAPTION, MEMBER_UNIQUE_NAME 
        ON ROWS 
        FROM ( 
            SELECT ({{ [Time Crate].[CR_Date].&[{start_date.strftime("%Y-%m-%dT00:00:00")}] : 
                         [Time Crate].[CR_Date].&[{end_date.strftime("%Y-%m-%dT00:00:00")}] }}) 
            ON COLUMNS 
            FROM [PPD_Actual]
        ) 
        WHERE ( [Defect Tracking].[Defect Group].&[M_Melt Loss] ) 
        CELL PROPERTIES VALUE, BACK_COLOR, FORE_COLOR, FORMATTED_VALUE, FORMAT_STRING, FONT_NAME, FONT_SIZE, FONT_FLAGS
    """

    # 查询 Finishing Loss 数据
    query_f = f"""
        SELECT NON EMPTY {{ [Measures].[F_Defect Loss%] }} ON COLUMNS, 
               NON EMPTY {{ ([Time Crate].[CR_Time YQMD].[CR_Date].ALLMEMBERS * 
                             [Tank].[Tank ID].&[{tank}] *
                             [Defect Tracking].[Defect ID].[Defect ID].ALLMEMBERS) }} 
               DIMENSION PROPERTIES MEMBER_CAPTION, MEMBER_UNIQUE_NAME 
        ON ROWS 
        FROM ( 
            SELECT ({{ [Time Crate].[CR_Date].&[{start_date.strftime("%Y-%m-%dT00:00:00")}] : 
                         [Time Crate].[CR_Date].&[{end_date.strftime("%Y-%m-%dT00:00:00")}] }}) 
            ON COLUMNS 
            FROM [PPD_Actual]
        ) 
        WHERE ( [Time Crate].[CR_Date].CurrentMember ) 
        CELL PROPERTIES VALUE, BACK_COLOR, FORE_COLOR, FORMATTED_VALUE, FORMAT_STRING, FONT_NAME, FONT_SIZE, FONT_FLAGS
    """

    try:
        # 查询 Melting Loss 数据
        with Pyadomd(conn_str) as conn:
            with conn.cursor().execute(query_m) as cur:
                df_m = pd.DataFrame(cur.fetchall(), columns=[col.name for col in cur.description])
        # 查询 Finishing Loss 数据
        with Pyadomd(conn_str) as conn:
            with conn.cursor().execute(query_f) as cur:
                df_f = pd.DataFrame(cur.fetchall(), columns=[col.name for col in cur.description])
        # 数据清理
        df_cleaned_M = clean_data(df_m)
        df_cleaned_F = clean_data(df_f)
        # 将数据转换为字典格式返回
        return df_cleaned_M.to_dict("records"), df_cleaned_F.to_dict("records")
        
    except Exception as e:
        print("Error occurred during query execution:")
        print(e)
        return [], []

@app.callback(
    Output('date-picker', 'value'),
    Input('date-shortcuts', 'value')
)
def update_datepicker(selected_period):
    today = datetime.today()
    if selected_period == '1Y':
        start_date = today - timedelta(days=365)
    elif selected_period == '6M':
        start_date = today - timedelta(days=182)
    elif selected_period == '1M':
        start_date = today - timedelta(days=30)
    elif selected_period == '7D':
        start_date = today - timedelta(days=7)
    else:
        start_date = today - timedelta(days=30)  
    end_date = today + timedelta(days=1)

    return [start_date.strftime('%Y-%m-%d'), end_date.strftime('%Y-%m-%d')]

@app.callback(
    [Output("defect-picker", "options"),  # 更新 defect-picker 的選項
     Output("defect-picker", "value")],  # 更新 defect-picker 的預設值
    [Input("loss-type", "value"),         # 當 loss-type 改變時觸發
     Input("tank-picker", "value"),       # 當 tank 改變時也觸發
     Input("date-picker", "value")],      # 當日期範圍改變時觸發
    [State("filtered-data-melting", "data"),  # 輸入 melting 數據
     State("filtered-data-finishing", "data")]  # 輸入 finishing 數據
)
def update_defect_picker(loss_type, tank, date_range, data_melting, data_finishing):
    if not date_range or len(date_range) != 2 or not tank:
        return [], []  # 如果輸入不完整，返回空選項和清空選擇

    start_date, end_date = map(pd.to_datetime, date_range)

    # 將輸入的字典格式數據轉換為 DataFrame
    if data_melting:
        df_cleaned_M = pd.DataFrame(data_melting)
        df_cleaned_M["CR_Date"] = pd.to_datetime(df_cleaned_M["CR_Date"], errors="coerce")
    else:
        df_cleaned_M = pd.DataFrame()

    if data_finishing:
        df_cleaned_F = pd.DataFrame(data_finishing)
        df_cleaned_F["CR_Date"] = pd.to_datetime(df_cleaned_F["CR_Date"], errors="coerce")
    else:
        df_cleaned_F = pd.DataFrame()
    print(df_cleaned_M)
    print(df_cleaned_F)
    df_cleaned_M.to_excel('dfm.xlsx', index = False)

    # 根據 loss_type 合併數據
    if loss_type == 'melting+finishing':
        filtered_df_melting = df_cleaned_M[
            (df_cleaned_M["Tank ID"] == tank) &
            (df_cleaned_M["CR_Date"] >= start_date) &
            (df_cleaned_M["CR_Date"] <= end_date)
        ]
        filtered_df_finishing = df_cleaned_F[
            (df_cleaned_F["Tank ID"] == tank) &
            (df_cleaned_F["CR_Date"] >= start_date) &
            (df_cleaned_F["CR_Date"] <= end_date)
        ]
        filtered_df = pd.concat([filtered_df_melting, filtered_df_finishing])
    elif loss_type == 'melting':
        filtered_df = df_cleaned_M[
            (df_cleaned_M["Tank ID"] == tank) &
            (df_cleaned_M["CR_Date"] >= start_date) &
            (df_cleaned_M["CR_Date"] <= end_date)
        ]
    elif loss_type == 'finishing':
        filtered_df = df_cleaned_F[
            (df_cleaned_F["Tank ID"] == tank) &
            (df_cleaned_F["CR_Date"] >= start_date) &
            (df_cleaned_F["CR_Date"] <= end_date)
        ]
    else:
        return [], []

    # 獲取唯一的 Defect ID 選項
    all_defects = filtered_df["Defect ID"].dropna().unique()
    defect_options = [{"label": defect, "value": defect} for defect in all_defects]
    print('defect_options:',filtered_df)
    # 默認選中所有 Defect
    default_values = list(all_defects)

    return defect_options, default_values

@app.callback(
    Output("tags", "options"), 
    Input("tank-picker", "value")
)
def update_tags_options(Tank_ID):
    with PI.PIServer(server="grape") as server:
        points = server.search(f'*T{Tank_ID}*')
        pi_tags = [p.name for p in points]

    return pi_tags


from plotly.subplots import make_subplots
import plotly.express as px

# 選擇固定的顏色板，這裡以 Plotly 的顏色板為例
color_palette = px.colors.qualitative.Plotly

defect_colors = {
    'Inclusion': '#FF8FFF',
    'Cord': '#FF0000',
    'PM Melting': '#000000',
    'Blister': '#008800',
    'Crystalline Pt': '#B3B3B3',
    'Inclusion (Manual)': '#118DFF',
    'Inclusion (IIS)': '#85C5FF',
    'Inclusion (MRS miss)': '#0000CD',
    'Needle Pt': '#E66C37',
    'Other Inclusion': '#F0EA00',
    'Platinum': '#00FFFF',
    'Surface Blister': '#00FF00',
    'Zr': '#8B0000'
}

@app.callback(
    Output("combined-graph", "figure"),
    [Input("tags", "value"),
     Input("date-picker", "value"),
     Input("interval", "value"),
     Input("tank-picker", "value"),
     Input("loss-type", "value"),
     Input("defect-picker", "value"),
     Input("pi-y-axis-setting", "value")],  # 新增 Y 軸模式輸入
    [State("filtered-data-melting", "data"),  # 輸入 Melting 數據
     State("filtered-data-finishing", "data")]  # 輸入 Finishing 數據
)
def update_combined_graph(tags, date_range, interval, tank, loss_type, defect, pi_y_axis_mode, 
                          data_melting, data_finishing):
    fig = go.Figure()

    if not date_range or len(date_range) != 2 or not tank:
        raise PreventUpdate  # 如果輸入條件不足，則不更新圖表

    start_date, end_date = map(pd.to_datetime, date_range)

    # 將輸入的字典格式數據轉換為 DataFrame
    if data_melting:
        df_cleaned_M = pd.DataFrame(data_melting)
        df_cleaned_M["CR_Date"] = pd.to_datetime(df_cleaned_M["CR_Date"], errors="coerce")
    else:
        df_cleaned_M = pd.DataFrame()

    if data_finishing:
        df_cleaned_F = pd.DataFrame(data_finishing)
        df_cleaned_F["CR_Date"] = pd.to_datetime(df_cleaned_F["CR_Date"], errors="coerce")
    else:
        df_cleaned_F = pd.DataFrame()
    
    # 根據 loss_type 合併數據
    if loss_type in ['melting', 'finishing', 'melting+finishing']:
        if loss_type == 'melting':
            filtered_df = df_cleaned_M[
                (df_cleaned_M["CR_Date"] >= start_date) &
                (df_cleaned_M["CR_Date"] <= end_date) &
                (df_cleaned_M["Tank ID"] == tank)
            ]
        elif loss_type == 'finishing':
            filtered_df = df_cleaned_F[
                (df_cleaned_F["CR_Date"] >= start_date) &
                (df_cleaned_F["CR_Date"] <= end_date) &
                (df_cleaned_F["Tank ID"] == tank)
            ]
        elif loss_type == 'melting+finishing':
            filtered_df_melting = df_cleaned_M[
                (df_cleaned_M["CR_Date"] >= start_date) &
                (df_cleaned_M["CR_Date"] <= end_date) &
                (df_cleaned_M["Tank ID"] == tank)
            ]
            filtered_df_finishing = df_cleaned_F[
                (df_cleaned_F["CR_Date"] >= start_date) &
                (df_cleaned_F["CR_Date"] <= end_date) &
                (df_cleaned_F["Tank ID"] == tank)
            ]
            filtered_df = pd.concat([filtered_df_melting, filtered_df_finishing])
    else:
        return fig  # 如果 loss_type 無效，返回空圖表
        # 繪製 Defect
    if defect:
        final_df = filtered_df[filtered_df['Defect ID'].isin(defect)]
        for selected_defect in defect:
            df_defect = final_df[final_df['Defect ID'] == selected_defect]
            loss_column = (
                "M_Defect Loss%" if selected_defect in df_cleaned_M["Defect ID"].unique()
                else "F_Defect Loss%"
            )
            fig.add_trace(go.Bar(
                x=df_defect["CR_Date"],
                y=df_defect[loss_column],
                name=selected_defect,
                marker_color=defect_colors.get(selected_defect)
            ))
        fig.update_layout(barmode='stack')
    else:
        pass


    # 如果有選擇 PI tags 且有日期範圍，則提取並繪製 PI 數據
    if tags and start_date and end_date:
        servername = "grape"  # 設定 PI 伺服器名稱
        with PI.PIServer(server=servername) as server:
            points = server.search(tags)  # 搜尋所選的 PI tags
            if len(points) > 0:
                series = []
                for p in points:
                    # 使用選擇的頻率取樣數據
                    sampling_interval = '30m'  # 默認為 30 分鐘
                    if interval == 'd':
                        sampling_interval = '30m'
                    elif interval == 'h':
                        sampling_interval = '30m'
                    elif interval == '5m':
                        sampling_interval = '5m'  # 若選擇 "5m" 則設置為 5 分鐘
                    elif interval == '1m':
                        sampling_interval = '1m'  # 若選擇 "1m" 則設置為 1 分鐘

                    data = p.interpolated_values(
                        start_time=start_date,
                        end_time=end_date,
                        interval=sampling_interval
                    )
                    
                    # 將數據轉換為 DataFrame 並重新設置索引
                    interpolated_data = pd.DataFrame(data).reset_index()
                    interpolated_data.columns = ['Timestamp', p.name]
                    
                    # 將非數字型資料轉換為 None
                    def convert_to_numeric(val):
                        try:
                            return float(val)
                        except (ValueError, TypeError):
                            return None  # 如果無法轉換，返回 None
                    
                    interpolated_data[p.name] = interpolated_data[p.name].apply(convert_to_numeric)
                    interpolated_data['Timestamp'] = pd.to_datetime(interpolated_data['Timestamp'])
                    interpolated_data.set_index('Timestamp', inplace=True)

                    # 根據使用者選擇的 interval 將數據重新取樣
                    if interval == 'd':  # 若選擇每日資料
                        resampled_data = interpolated_data.resample('1D').mean()
                    elif interval == 'h':  # 若選擇每小時資料
                        resampled_data = interpolated_data.resample('1H').mean()
                    elif interval == '5m':  # 若選擇5m資料
                        resampled_data = interpolated_data.resample('5min').mean()
                    else:  # 否則1m
                        resampled_data = interpolated_data

                    series.append(resampled_data)  # 將每個 Tag 的數據加入 series 清單

                # 合併所有 PI tags 數據
                df = pd.concat(series, axis=1)
                print(df)
                df.to_excel('PI.xlsx', index=False)

                # 設定顏色循環，避免顏色數量限制
                color_idx = 0
                for idx, tag in enumerate(tags):
                    if tag in df.columns:
                        # 判斷 defect 是否為空
                        if not defect:
                            # 無選擇 defect：第一個 tag 使用主 Y 軸，其餘 tags 疊加到額外 Y 軸
                            # 添加 Y 軸設置根據選擇切換
                            if pi_y_axis_mode == 'single':
                                fig.add_trace(go.Scatter(
                                    x=df.index,
                                    y=df[tag],
                                    mode='lines',
                                    name=tag,
                                    line=dict(color=color_palette[color_idx % len(color_palette)]),
                                    yaxis='y2',  # 主 Y 軸
                                ))
                                fig.update_layout(
                                    yaxis2=dict(
                                    side='right',
                                    position=1,
                                    tickfont=dict(color='black'),
                                ))
                            elif pi_y_axis_mode == 'multiple':
                                if idx == 0:
                                    fig.add_trace(go.Scatter(
                                        x=df.index,
                                        y=df[tag],
                                        mode='lines',
                                        name=tag,
                                        line=dict(color=color_palette[color_idx % len(color_palette)]),
                                        yaxis='y',  # 主 Y 軸
                                    ))
                                    fig.update_layout(yaxis=dict(
                                            title=tag,
                                            side='right',
                                            position=1,
                                            titlefont=dict(color=color_palette[color_idx % len(color_palette)]),
                                            tickfont=dict(color=color_palette[color_idx % len(color_palette)]),
                                        ))
                                else:
                                    fig.add_trace(go.Scatter(
                                        x=df.index,
                                        y=df[tag],
                                        mode='lines',
                                        name=tag,
                                        line=dict(color=color_palette[color_idx % len(color_palette)]),
                                        yaxis=f'y{idx+1}',  # 額外 Y 軸
                                    ))
                                    fig.update_layout(
                                        **{f'yaxis{idx+1}': dict(
                                            overlaying='y',  # 疊加到主 Y 軸
                                            side='right' ,
                                            position=0.96 - 0.04 * (idx - 1),  # 計算位置
                                            titlefont=dict(color=color_palette[color_idx % len(color_palette)]),
                                            tickfont=dict(color=color_palette[color_idx % len(color_palette)]),
                                        )})
                            elif pi_y_axis_mode == 'autoscale':
                                    fig.add_trace(go.Scatter(x=df.index, 
                                        y=df[tag], 
                                        mode='lines', 
                                        name=tag,
                                        line=dict(color=color_palette[color_idx % len(color_palette)]),  
                                        yaxis=f'y{idx+1}'))

                                    # 設定額外的 Y 軸屬性
                                    fig.update_layout(
                                        **{f'yaxis{idx+1}': dict(
                                            domain=[(len(tags) - (idx+2)) / len(tags), ((len(tags)+1) - (idx+2)) / len(tags)],
                                            titlefont=dict(color=color_palette[color_idx % len(color_palette)]),
                                            tickfont=dict(color=color_palette[color_idx % len(color_palette)]),
                                            anchor="free",
                                            side="right",
                                            position=1
                                        )}
                                    )
                        else:
                            if pi_y_axis_mode == 'single':
                                fig.add_trace(go.Scatter(
                                    x=df.index,
                                    y=df[tag],
                                    mode='lines',
                                    name=tag,
                                    line=dict(color=color_palette[color_idx % len(color_palette)]),
                                    yaxis='y2',  # 主 Y 軸
                                ))
                                fig.update_layout(
                                    yaxis2=dict(
                                    overlaying='y',
                                    side='right',
                                    position=1,
                                    tickfont=dict(color='black'),
                                ))
                            elif pi_y_axis_mode == 'multiple':                           
                                # 有選擇 defect：所有 tags 疊加到額外 Y 軸
                                fig.add_trace(go.Scatter(
                                    x=df.index,
                                    y=df[tag],
                                    mode='lines',
                                    name=tag,
                                    line=dict(color=color_palette[color_idx % len(color_palette)]),
                                    yaxis=f'y{idx+2}',  # 額外 Y 軸
                                ))
                                fig.update_layout(
                                    **{f'yaxis{idx+2}': dict(
                                        overlaying='y',  # 疊加到主 Y 軸
                                        side='right',
                                        position=1 - 0.04 * idx,  # 計算位置
                                        titlefont=dict(color=color_palette[color_idx % len(color_palette)]),
                                        tickfont=dict(color=color_palette[color_idx % len(color_palette)]),
                                    )}
                                )
                        color_idx += 1  # 更新顏色索引

    # 計算總共的 Y 軸數量
    total_y_axes = len(tags) if tags else 1  # 預設至少有主 Y 軸

    # 動態調整 X 軸 domain（減少退縮範圍）
    x_domain_end = 1 if pi_y_axis_mode == 'single' else 1- ((total_y_axes - 1) * 0.04) 

    # 計算選擇的 defect 數量
    defect_count = len(defect) if defect else 0

    # 動態調整頂部邊距 (預設 90，額外增加 10 像素 * 每 3 個 defect)
    top_margin = 90 + 20 * (total_y_axes //2 ) + 20 * (defect_count // 2)

    # 更新圖表的佈局和標題
    fig.update_layout(
        showlegend=True,
        title=f'{tank} Inclusion loss and Process Chart' if defect else f'{tank} Process Chart',
        xaxis=dict(
            domain=[0, x_domain_end],  # 動態設定 X 軸的 domain 範圍
            tickformat='%Y-%m-%d\n%H:%M:%S',
            title='Date'
        ),
        yaxis=dict(tickformat='.2%', title='loss%') if defect else dict(tickformat='f', title='Value'),
        height=500,
        margin=dict(
            b=0, 
            l=0, 
            r=90 + (total_y_axes / 3) * 30,  # 動態增加右邊邊距，避免軸標題擁擠
            t=top_margin  # 頂部邊距根據 defect 數量動態調整
        ),
        dragmode='zoom',
        legend=dict(
            orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1
        ),
        )

    return fig  # 回傳更新後的圖表





if __name__ == '__main__':
    app.run_server(debug=True, port='8888')
