@app.callback(
    Output("combined-graph", "figure"),
    Input("tags", "value"),
    Input("date-picker", "value"),
    Input("interval", "value"),
    Input("tank-picker", "value"),
    Input("loss-type", "value"),
    Input("defect-picker", "value"),
)
def update_combined_graph(tags, date_range, interval, tank, loss_type, defect):
    fig = go.Figure()
    axis_count = 2

    if not date_range or len(date_range) != 2:
        raise PreventUpdate
    start_date, end_date = map(pd.to_datetime, date_range)

    # 处理 Loss 数据
    if loss_type in ['melting', 'finishing', 'melting+finishing']:
        if loss_type == 'melting':
            filtered_df = df_cleaned_M[
                (df_cleaned_M["CR_Date"] >= start_date) &
                (df_cleaned_M["CR_Date"] <= end_date) &
                (df_cleaned_M["Tank ID"] == tank)
            ]
        elif loss_type == 'finishing':
            filtered_df = df_cleaned_F[
                (df_cleaned_F["CR_Date"] >= start_date) &
                (df_cleaned_F["CR_Date"] <= end_date) &
                (df_cleaned_F["Tank ID"] == tank)
            ]
        elif loss_type == 'melting+finishing':
            filtered_df_melting = df_cleaned_M[
                (df_cleaned_M["CR_Date"] >= start_date) &
                (df_cleaned_M["CR_Date"] <= end_date) &
                (df_cleaned_M["Tank ID"] == tank)
            ]
            filtered_df_finishing = df_cleaned_F[
                (df_cleaned_F["CR_Date"] >= start_date) &
                (df_cleaned_F["CR_Date"] <= end_date) &
                (df_cleaned_F["Tank ID"] == tank)
            ]
            filtered_df = pd.concat([filtered_df_melting, filtered_df_finishing])
        print(filtered_df)
        # 如果有選defect
        if defect:
            final_df = filtered_df[filtered_df['Defect ID'].isin(defect)]
            for selected_defect in defect:
                df_defect = final_df[final_df['Defect ID'] == selected_defect]
                loss_column = (
                    "M_Defect Loss%" if selected_defect in df_cleaned_M["Defect ID"].unique()
                    else "F_Defect Loss%"
                )
                fig.add_trace(go.Bar(
                    x=df_defect["CR_Date"],
                    y=df_defect[loss_column],
                    name=selected_defect,
                    marker_color=defect_colors.get(selected_defect)
                ))
            fig.update_layout(barmode='stack')

            # 如果有選擇 PI tags 且有日期範圍，則提取並繪製 PI 數據
            if tags and start_date and end_date:
                servername = "grape"  # 設定 PI 伺服器名稱
                with PI.PIServer(server=servername) as server:
                    points = server.search(tags)  # 搜尋所選的 PI tags
                    if len(points) > 0:
                        series = []
                        for p in points:
                            # 使用選擇的頻率取樣數據
                            sampling_interval = '30m'  # 默認為 30 分鐘
                            if interval == 'd':
                                sampling_interval = '30m'
                            elif interval == 'h':
                                sampling_interval = '30m'
                            elif interval == '5m':
                                sampling_interval = '5m'  # 若選擇 "5m" 則設置為 5 分鐘
                            elif interval == '1m':
                                sampling_interval = '1m'  # 若選擇 "1m" 則設置為 1 分鐘

                            data = p.interpolated_values(
                                start_time=start_date,
                                end_time=end_date,
                                interval=sampling_interval
                            )
                            
                            # 將數據轉換為 DataFrame 並重新設置索引
                            interpolated_data = pd.DataFrame(data).reset_index()
                            interpolated_data.columns = ['Timestamp', p.name]
                            
                            # 將非數字型資料轉換為 None
                            def convert_to_numeric(val):
                                try:
                                    return float(val)
                                except (ValueError, TypeError):
                                    return None  # 如果無法轉換，返回 None
                            
                            interpolated_data[p.name] = interpolated_data[p.name].apply(convert_to_numeric)
                            interpolated_data['Timestamp'] = pd.to_datetime(interpolated_data['Timestamp'])
                            interpolated_data.set_index('Timestamp', inplace=True)

                            # 根據使用者選擇的 interval 將數據重新取樣
                            if interval == 'd':  # 若選擇每日資料
                                resampled_data = interpolated_data.resample('1D').mean()
                            elif interval == 'h':  # 若選擇每小時資料
                                resampled_data = interpolated_data.resample('1H').mean()
                            elif interval == '5m':  # 若選擇5m資料
                                resampled_data = interpolated_data.resample('5min').mean()
                            else:  # 否則1m
                                resampled_data = interpolated_data

                            series.append(resampled_data)  # 將每個 Tag 的數據加入 series 清單

                        # 合併所有 PI tags 數據
                        df = pd.concat(series, axis=1)
                        print(df)
                        df.to_excel('PI.xlsx', index=False)

                        # 設定顏色循環，避免顏色數量限制
                        color_idx = 0
                        for tag in tags:
                            if tag in df.columns:
                                fig.add_trace(go.Scatter(x=df.index, 
                                                        y=df[tag], 
                                                        mode='lines', 
                                                        name=tag,
                                                        line=dict(color=color_palette[color_idx % len(color_palette)]),  
                                                        yaxis='y' + str(axis_count),
                                                        hovertemplate='Time: %{x}<br>Value: %{y:.2f}'
                                                        ))

                                # 設定額外的 Y 軸屬性
                                fig.update_layout(
                                    **{'yaxis' + str(axis_count): dict(
                                        titlefont=dict(color=color_palette[color_idx % len(color_palette)]),
                                        tickfont=dict(color=color_palette[color_idx % len(color_palette)]),
                                        anchor="free",
                                        overlaying='y',
                                        side="right",
                                        position=1-(0.04*(axis_count-1))
                                    )}
                                )

                                axis_count += 1  # 增加 Y 軸數量計數器
                                color_idx += 1  # 更新顏色索引
        # 如果清空defect
        else:
            # 如果有選擇 PI tags 且有日期範圍，則提取並繪製 PI 數據
            axis_count = 1
            if tags and start_date and end_date:
                servername = "grape"  # 設定 PI 伺服器名稱
                with PI.PIServer(server=servername) as server:
                    points = server.search(tags)  # 搜尋所選的 PI tags
                    if len(points) > 0:
                        series = []
                        for p in points:
                            # 使用選擇的頻率取樣數據
                            sampling_interval = '30m'  # 默認為 30 分鐘
                            if interval == 'd':
                                sampling_interval = '30m'
                            elif interval == 'h':
                                sampling_interval = '30m'
                            elif interval == '5m':
                                sampling_interval = '5m'  # 若選擇 "5m" 則設置為 5 分鐘
                            elif interval == '1m':
                                sampling_interval = '1m'  # 若選擇 "1m" 則設置為 1 分鐘

                            data = p.interpolated_values(
                                start_time=start_date,
                                end_time=end_date,
                                interval=sampling_interval
                            )
                            
                            # 將數據轉換為 DataFrame 並重新設置索引
                            interpolated_data = pd.DataFrame(data).reset_index()
                            interpolated_data.columns = ['Timestamp', p.name]
                            
                            # 將非數字型資料轉換為 None
                            def convert_to_numeric(val):
                                try:
                                    return float(val)
                                except (ValueError, TypeError):
                                    return None  # 如果無法轉換，返回 None
                            
                            interpolated_data[p.name] = interpolated_data[p.name].apply(convert_to_numeric)
                            interpolated_data['Timestamp'] = pd.to_datetime(interpolated_data['Timestamp'])
                            interpolated_data.set_index('Timestamp', inplace=True)

                            # 根據使用者選擇的 interval 將數據重新取樣
                            if interval == 'd':  # 若選擇每日資料
                                resampled_data = interpolated_data.resample('1D').mean()
                            elif interval == 'h':  # 若選擇每小時資料
                                resampled_data = interpolated_data.resample('1H').mean()
                            elif interval == '5m':  # 若選擇5m資料
                                resampled_data = interpolated_data.resample('5min').mean()
                            else:  # 否則1m
                                resampled_data = interpolated_data

                            series.append(resampled_data)  # 將每個 Tag 的數據加入 series 清單

                        # 合併所有 PI tags 數據
                        df = pd.concat(series, axis=1)
                        print(df)
                        df.to_excel('PI.xlsx', index=False)

                        # 設定顏色循環，避免顏色數量限制
                        color_idx = 0
                        for tag in tags:
                            if tag in df.columns:
                                fig.add_trace(go.Scatter(x=df.index, 
                                                        y=df[tag], 
                                                        mode='lines', 
                                                        name=tag,
                                                        line=dict(color=color_palette[color_idx % len(color_palette)]),  
                                                        yaxis='y' + str(axis_count),
                                                        hovertemplate='Time: %{x}<br>Value: %{y:.2f}'
                                                        ))

                                # 設定額外的 Y 軸屬性
                                fig.update_layout(
                                        yaxis=dict(side='right',
                                        titlefont=dict(color=color_palette[color_idx % len(color_palette)]),
                                        tickfont=dict(color=color_palette[color_idx % len(color_palette)])),

                                    **{'yaxis' + str(axis_count + 1): dict(
                                        titlefont=dict(color=color_palette[color_idx % len(color_palette)]),
                                        tickfont=dict(color=color_palette[color_idx % len(color_palette)]),
                                        anchor="free",
                                        overlaying='y',
                                        side="right",
                                        position=1-(0.04*(axis_count))
                                    )}
                                )

                                axis_count += 1  # 增加 Y 軸數量計數器
                                color_idx += 1  # 更新顏色索引

            
    else:
        pass



    # 更新圖表的佈局和標題
    fig.update_layout(
        showlegend=True,
        title=f'{tank} Performance and Process Chart',
        xaxis=dict(domain=[0, 1-((axis_count-1)*0.04)], 
                   tickformat='%Y-%m-%d\n%H:%M:%S',
                   title='Date'),
        yaxis=dict(tickformat='.2%'),
        yaxis_title='Value',
        height=500,
        margin=dict(b=0, l=0, r=90, t=90+30*(axis_count/3)),
        dragmode='zoom',
        legend_title_text=None,
        legend=dict(
            orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1
        ),
    )

    return fig  # 回傳更新後的圖表
