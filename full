from sys import path
import plotly.graph_objects as go
import plotly.express as px
from dash import Dash, html, dcc, Input, Output, State, dash_table
import dash_bootstrap_components as dbc
from dash.exceptions import PreventUpdate
import pandas as pd
import base64
import io
from dash_auth import BasicAuth
import PIconnect as PI
from datetime import datetime, timedelta

PI.PIConfig.DEFAULT_TIMEZONE = "Asia/Taipei"

path.append(
    "C:\\Users\\chenk23\\Desktop\\DT2\\20240507\\03_Databases"
)  # added to the path BEFORE importing the pyadomd package

from pyadomd import Pyadomd
import pandas as pd

conn_str = "Provider=MSOLAP;Data Source=cgtppd;Catalog=ppd;"
query = "  SELECT NON EMPTY { [Measures].[M_Defect Loss%], [Measures].[F_Defect Loss%] } ON COLUMNS, NON EMPTY { ([Time Crate].[CR_Time YQMD].[CR_Date].ALLMEMBERS * [Tank].[Tank ID].[Tank ID].ALLMEMBERS * [Defect Tracking].[Defect ID].[Defect ID].ALLMEMBERS ) } DIMENSION PROPERTIES MEMBER_CAPTION, MEMBER_UNIQUE_NAME ON ROWS FROM ( SELECT ( { [Defect Tracking].[Defect SubGroup].&[F_Material Loss]&[Inclusion], [Defect Tracking].[Defect SubGroup].[All] } ) ON COLUMNS FROM ( SELECT ( { [Defect Tracking].[Defect Group].&[M_Melt Loss] } ) ON COLUMNS FROM ( SELECT ( { [Tank].[Tank ID].&[TC01], [Tank].[Tank ID].&[TC02], [Tank].[Tank ID].&[TC03], [Tank].[Tank ID].&[TC04], [Tank].[Tank ID].&[TC05], [Tank].[Tank ID].&[TC06], [Tank].[Tank ID].&[TC07], [Tank].[Tank ID].&[TC08], [Tank].[Tank ID].&[TC09], [Tank].[Tank ID].&[TC10], [Tank].[Tank ID].&[TC11], [Tank].[Tank ID].&[TC12], [Tank].[Tank ID].&[TC13], [Tank].[Tank ID].&[TC14], [Tank].[Tank ID].&[TC15], [Tank].[Tank ID].&[TC16], [Tank].[Tank ID].&[TC17], [Tank].[Tank ID].&[TC18], [Tank].[Tank ID].&[TC19], [Tank].[Tank ID].&[TC20], [Tank].[Tank ID].&[TC21] } ) ON COLUMNS FROM ( SELECT ( { [Time Crate].[CR_Year].&[2024] } ) ON COLUMNS FROM [PPD_Actual])))) WHERE ( [Time Crate].[CR_Year].&[2024], [Defect Tracking].[Defect Group].&[M_Melt Loss], [Defect Tracking].[Defect SubGroup].CurrentMember ) CELL PROPERTIES VALUE, BACK_COLOR, FORE_COLOR, FORMATTED_VALUE, FORMAT_STRING, FONT_NAME, FONT_SIZE, FONT_FLAGS"

with Pyadomd(conn_str) as conn:
    with conn.cursor().execute(query) as cur:
        df = pd.DataFrame(cur.fetchone(), columns=[i.name for i in cur.description])

# Clean this table!
df_cleaned = df.loc[
    :, [c for c in df.columns if c[-20:] != "[MEMBER_UNIQUE_NAME]"]
]  # 去掉"[MEMBER_UNIQUE_NAME]"的columns
df_cleaned.columns = [
    c[:-17] if c[-16:] == "[MEMBER_CAPTION]" else c for c in df_cleaned.columns
]  # 去掉欄位中的"[MEMBER_CAPTION]"
df_cleaned.columns = [c.split(".")[-1][1:-1] for c in df_cleaned.columns]

df_cleaned.to_excel('M_loss.xlsx', index=False)

import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output, State

# 创建 Dash 应用
app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP, dbc.icons.BOOTSTRAP])

tanks = df_cleaned["Tank ID"].unique()
defects = df_cleaned["Defect ID"].unique()

app.layout = dbc.Container([
    dbc.Row([
        dbc.Col([
            dbc.Card([
                dbc.CardHeader("選擇日期"),
                dbc.CardBody([
                    dcc.DatePickerRange(
                        id='date-picker',
                        min_date_allowed=df_cleaned['CR_Date'].min(),
                        max_date_allowed=(datetime.now() + timedelta(days=1)).date(),
                        start_date=(datetime.now() - timedelta(days=30)).date(),
                        end_date=(datetime.now() + timedelta(days=1)).date()
                    ),
                ])
            ], className="mb-3"),
            dbc.Card([
                dbc.CardHeader("選擇Tank"),
                dbc.CardBody([
                    dcc.Dropdown(
                        id='tank-picker',
                        options=[{'label': i, 'value': i} for i in tanks],
                        value=tanks[0]
                    ),
                ]),
            ], className="mb-3"),
            dbc.Card([
                dbc.CardHeader("選擇Defect"),
                dbc.CardBody([
                    dcc.Dropdown(
                        id='defect-picker',
                        options=[{'label': i, 'value': i} for i in defects],
                        value=defects[0]
                    ),
                ]),
            ], className="mb-3"),
        ], width=4),
    ]),
    dbc.Row([
    dbc.Col([
        dbc.Card([
            dbc.CardHeader("選擇Pi Data取值頻率"),
            dbc.CardBody([
                dbc.RadioItems(
                    options=[
                        {"label": "Daily", "value": "d"},
                        {"label": "Hourly", "value": "h"},
                        {"label": "5min", "value": "5m"},
                        {"label": "1min", "value": "1m"}
                    ],
                    value="d",
                    inline=True,
                    id="interval",
                    className="mb-3",
                ),
            ]),
        ], className="mb-3"),
    ], width=6),
    ]),
    dbc.Row([
    dbc.Col([
        dbc.Card([
            dbc.CardHeader("選擇PI Tags"),
            dbc.CardBody([
                html.Div([
                    dcc.Dropdown(
                        options=[],
                        multi=True,
                        id="tags",
                        className="mb-3",
                    ),
                ]),
            ]),
        ], className="mb-3"),
    ], width=6)
    ]),
        dbc.Row([
        dbc.Col([
            dbc.Card([
                dbc.CardBody([
                    dcc.Graph(
                        id="combined-graph",
                        style={"height": "500px"},
                    ),
                ]),
            ], className="mb-3"),
        ], width=11),
    ]),
])

@app.callback(
    Output("tags", "options"), 
    Input("tank-picker", "value")
)
def update_tags_options(Tank_ID):
    with PI.PIServer(server="grape") as server:
        points = server.search(f'*T{Tank_ID}*')
        pi_tags = [p.name for p in points]

    return pi_tags


from plotly.subplots import make_subplots
import plotly.express as px

# 選擇固定的顏色板，這裡以 Plotly 的顏色板為例
color_palette = px.colors.qualitative.Plotly

@app.callback(
    Output("combined-graph", "figure"),
    Input("tags", "value"),
    Input("date-picker", "start_date"),
    Input("date-picker", "end_date"),
    Input("interval", "value"),
    Input("tank-picker", "value"),
)
def update_combined_graph(tags, start_date, end_date, interval, tank):
    # 創建一個空的圖表，設定固定顏色板
    fig = go.Figure()
    
    axis_count = 2  # 初始化Y軸數量計數器

    # 將選擇的日期範圍轉換為日期時間格式
    start_date = pd.to_datetime(start_date)
    end_date = pd.to_datetime(end_date)
    
    # 過濾 df_cleaned 中符合日期範圍和選擇的 Tank 的數據
    filtered_df = df_cleaned[
        (pd.to_datetime(df_cleaned["CR_Date"]) >= start_date) &
        (pd.to_datetime(df_cleaned["CR_Date"]) <= end_date) &
        (df_cleaned["Tank ID"] == tank)
    ]

    # 繪製缺陷數據的堆疊柱狀圖
    for defect in filtered_df['Defect ID'].unique():
        df_defect = filtered_df[filtered_df['Defect ID'] == defect]
        fig.add_trace(go.Bar(x=df_defect["CR_Date"], 
                             y=df_defect["M_Defect Loss%"], 
                             name=defect))

    fig.update_layout(barmode='stack')  # 設定柱狀圖為堆疊模式

    # 如果有選擇 PI tags 且有日期範圍，則提取並繪製 PI 數據
    if tags and start_date and end_date:
        servername = "grape"  # 設定 PI 伺服器名稱
        with PI.PIServer(server=servername) as server:
            points = server.search(tags)  # 搜尋所選的 PI tags
            if len(points) > 0:
                series = []
                for p in points:
                    # 使用選擇的頻率取樣數據
                    sampling_interval = '30m'  # 默認為 30 分鐘
                    if interval == 'd':
                        sampling_interval = '30m'
                    elif interval == 'h':
                        sampling_interval = '30m'
                    elif interval == '5m':
                        sampling_interval = '5m'  # 若選擇 "5m" 則設置為 5 分鐘
                    elif interval == '1m':
                        sampling_interval = '1m'  # 若選擇 "1m" 則設置為 1 分鐘

                    data = p.interpolated_values(
                        start_time=start_date,
                        end_time=end_date,
                        interval=sampling_interval
                    )
                    
                    # 將數據轉換為 DataFrame 並重新設置索引
                    interpolated_data = pd.DataFrame(data).reset_index()
                    interpolated_data.columns = ['Timestamp', p.name]
                    
                    # 將非數字型資料轉換為 None
                    def convert_to_numeric(val):
                        try:
                            return float(val)
                        except (ValueError, TypeError):
                            return None  # 如果無法轉換，返回 None
                    
                    interpolated_data[p.name] = interpolated_data[p.name].apply(convert_to_numeric)
                    interpolated_data['Timestamp'] = pd.to_datetime(interpolated_data['Timestamp'])
                    interpolated_data.set_index('Timestamp', inplace=True)

                    # 根據使用者選擇的 interval 將數據重新取樣
                    if interval == 'd':  # 若選擇每日資料
                        resampled_data = interpolated_data.resample('1D').mean()
                    elif interval == 'h':  # 若選擇每小時資料
                        resampled_data = interpolated_data.resample('1H').mean()
                    elif interval == '5m':  # 若選擇5m資料
                        resampled_data = interpolated_data.resample('5min').mean()
                    else:  # 否則1m
                        resampled_data = interpolated_data

                    series.append(resampled_data)  # 將每個 Tag 的數據加入 series 清單

                # 合併所有 PI tags 數據
                pi_data = pd.concat(series, axis=1)

                # 設定顏色循環，避免顏色數量限制
 
            for idx, tag in enumerate(tags, start=1):
                if tag in pi_data.columns:
                    y_min, y_max = pi_data[tag].min(), pi_data[tag].max()
                    # 確保 colorway 有效
                    colorway = fig['layout'].get('colorway', None)
                    if not colorway:  # 如果 colorway 是 None
                        colorway = px.colors.qualitative.Plotly  # 使用 Plotly 默認配色
                    if idx <= 6:
                        # 為前六個 Tag 動態分配 y 軸範圍與位置
                        fig.add_trace(go.Scatter(
                            x=pi_data.index,
                            y=pi_data[tag],
                            mode='lines',
                            name=tag,
                            yaxis=f'y{idx}',
                            hovertemplate=f'{tag}<br>%{{x}}<br>%{{y:.2f}}'
                        ))

                        # 動態添加獨立 y 軸，並按圖表高度均分
                        fig.update_layout(
                            **{
                                f'yaxis{idx}': dict(
                                    title=tag,
                                    range=[y_min - (y_max - y_min) * 0.1, y_max + (y_max - y_min) * 0.1],
                                    domain=[(6 - idx) / 6, (7 - idx) / 6],  # 均分位置
                                    tickfont=dict(color=fig['layout']['colorway'][idx % len(fig['layout']['colorway'])]),
                                )
                            }
                        )
                    else:
                        # 第七個及以後的 Tag，顯示在第六個位置的 domain，但保留自己的 y 軸範圍
                        fig.add_trace(go.Scatter(
                            x=pi_data.index,
                            y=pi_data[tag],
                            mode='lines',
                            name=tag,
                            yaxis=f'y{idx}',
                            hovertemplate=f'{tag}<br>%{{x}}<br>%{{y:.2f}}'
                        ))

                        # 動態添加獨立 y 軸，位置與第六條相同
                        fig.update_layout(
                            **{
                                f'yaxis{idx}': dict(
                                    title=tag,
                                    range=[y_min - (y_max - y_min) * 0.1, y_max + (y_max - y_min) * 0.1],
                                    domain=[0, 1/6],  # 固定到最底部
                                    tickfont=dict(color=fig['layout']['colorway'][idx % len(fig['layout']['colorway'])]),
                                )
                            }
                        )


    # 更新圖表的佈局和標題
    fig.update_layout(
        title=f'{tank} Performance and Process trend',
        xaxis=dict(domain=[0, 1-((axis_count-2)*0.04)], title='Date'),
        yaxis=dict(tickformat='.1%'),
        yaxis_title='Value',
        height=500,
        margin=dict(b=0, l=0, r=90, t=90+30*(axis_count/3)),
        dragmode='zoom',
        legend_title_text=None,
        legend=dict(
            orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1
        ),
    )

    return fig  # 回傳更新後的圖表

if __name__ == '__main__':
    app.run_server(debug=True, port='7788')
