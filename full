@app.callback(
    Output("combined-graph", "figure"),
    Input("tags", "value"),
    Input("date-picker", "value"),
    Input("interval", "value"),
)
def update_tags_graph(tags, date_range, interval):
    fig = go.Figure()
    axis_count = 2

    # 確認日期範圍有效
    if not date_range or len(date_range) != 2:
        raise PreventUpdate
    start_date, end_date = map(pd.to_datetime, date_range)

    # 檢查是否選擇了tags
    if tags:
        servername = "grape"  # 設定 PI 伺服器名稱
        with PI.PIServer(server=servername) as server:
            points = server.search(tags)  # 搜尋所選的 PI tags
            if len(points) > 0:
                series = []
                for p in points:
                    # 設定取樣間隔
                    if interval == 'd':
                        sampling_interval = '1D'
                    elif interval == 'h':
                        sampling_interval = '1H'
                    elif interval == '5m':
                        sampling_interval = '5min'
                    else:  # 默認為 1 分鐘
                        sampling_interval = '1min'

                    # 提取插值數據
                    data = p.interpolated_values(
                        start_time=start_date,
                        end_time=end_date,
                        interval=sampling_interval
                    )

                    # 轉換為 DataFrame
                    interpolated_data = pd.DataFrame(data).reset_index()
                    interpolated_data.columns = ['Timestamp', p.name]
                    
                    # 將非數字型數據設為 None
                    interpolated_data[p.name] = pd.to_numeric(interpolated_data[p.name], errors='coerce')
                    interpolated_data['Timestamp'] = pd.to_datetime(interpolated_data['Timestamp'])
                    interpolated_data.set_index('Timestamp', inplace=True)

                    # 重新取樣數據
                    if interval in ['d', 'h', '5m']:
                        resampled_data = interpolated_data.resample(sampling_interval).mean()
                    else:
                        resampled_data = interpolated_data

                    series.append(resampled_data)

                # 合併所有 PI tags 數據
                df = pd.concat(series, axis=1)

                # 添加每個 Tag 到圖表
                color_idx = 0
                for tag in tags:
                    if tag in df.columns:
                        fig.add_trace(go.Scatter(
                            x=df.index,
                            y=df[tag],
                            mode='lines',
                            name=tag,
                            line=dict(color=color_palette[color_idx % len(color_palette)]),
                            yaxis=f'y{axis_count}' if axis_count > 1 else 'y',
                            hovertemplate='Time: %{x}<br>Value: %{y:.2f}'
                        ))

                        # 設定額外的 Y 軸屬性
                        if axis_count > 1:
                            fig.update_layout(
                                **{f'yaxis{axis_count}': dict(
                                    titlefont=dict(color=color_palette[color_idx % len(color_palette)]),
                                    tickfont=dict(color=color_palette[color_idx % len(color_palette)]),
                                    anchor="free",
                                    overlaying='y',
                                    side="right",
                                    position=1 - (0.04 * (axis_count - 1))
                                )}
                            )

                        axis_count += 1
                        color_idx += 1

    # 更新圖表布局
    fig.update_layout(
        title="PI Tags Data",
        xaxis=dict(title="Date", tickformat='%Y-%m-%d\n%H:%M:%S'),
        yaxis=dict(title="Values", tickformat='.2f'),
        height=500,
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        ),
        margin=dict(b=0, l=0, r=90, t=60),
        dragmode='zoom',
    )

    return fig
