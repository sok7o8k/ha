conn_str = "Provider=MSOLAP;Data Source=cgtppd;Catalog=ppd;"
query_M = "  SELECT NON EMPTY { [Measures].[M_Defect Loss%] } ON COLUMNS, NON EMPTY { ([Time Crate].[CR_Time YQMD].[CR_Date].ALLMEMBERS * [Tank].[Tank ID].[Tank ID].ALLMEMBERS * [Defect Tracking].[Defect ID].[Defect ID].ALLMEMBERS ) } DIMENSION PROPERTIES MEMBER_CAPTION, MEMBER_UNIQUE_NAME ON ROWS FROM ( SELECT ( { [Defect Tracking].[Defect Group].&[M_Melt Loss] } ) ON COLUMNS FROM ( SELECT ( { [Tank].[Tank ID].&[TC01], [Tank].[Tank ID].&[TC02], [Tank].[Tank ID].&[TC03], [Tank].[Tank ID].&[TC04], [Tank].[Tank ID].&[TC05], [Tank].[Tank ID].&[TC06], [Tank].[Tank ID].&[TC07], [Tank].[Tank ID].&[TC08], [Tank].[Tank ID].&[TC09], [Tank].[Tank ID].&[TC10], [Tank].[Tank ID].&[TC11], [Tank].[Tank ID].&[TC12], [Tank].[Tank ID].&[TC13], [Tank].[Tank ID].&[TC14], [Tank].[Tank ID].&[TC15], [Tank].[Tank ID].&[TC16], [Tank].[Tank ID].&[TC17], [Tank].[Tank ID].&[TC18], [Tank].[Tank ID].&[TC19], [Tank].[Tank ID].&[TC20], [Tank].[Tank ID].&[TC21] } ) ON COLUMNS FROM ( SELECT ( { [Time Crate].[CR_Year].&[2024], [Time Crate].[CR_Year].&[2023] } ) ON COLUMNS FROM [PPD_Actual]))) WHERE ( [Time Crate].[CR_Year].CurrentMember, [Defect Tracking].[Defect Group].&[M_Melt Loss] ) CELL PROPERTIES VALUE, BACK_COLOR, FORE_COLOR, FORMATTED_VALUE, FORMAT_STRING, FONT_NAME, FONT_SIZE, FONT_FLAGS"
query_F = " SELECT NON EMPTY { [Measures].[F_Defect Loss%] } ON COLUMNS, NON EMPTY { ([Time Crate].[CR_Time YQMD].[CR_Date].ALLMEMBERS * [Tank].[Tank ID].[Tank ID].ALLMEMBERS * [Defect Tracking].[Defect ID].[Defect ID].ALLMEMBERS ) } DIMENSION PROPERTIES MEMBER_CAPTION, MEMBER_UNIQUE_NAME ON ROWS FROM ( SELECT ( { [Defect Tracking].[Defect ID].&[165], [Defect Tracking].[Defect ID].&[1028], [Defect Tracking].[Defect ID].&[311], [Defect Tracking].[Defect ID].&[252], [Defect Tracking].[Defect ID].&[407], [Defect Tracking].[Defect ID].&[171], [Defect Tracking].[Defect ID].&[838], [Defect Tracking].[Defect ID].&[169], [Defect Tracking].[Defect ID].&[836], [Defect Tracking].[Defect ID].&[167], [Defect Tracking].[Defect ID].&[834], [Defect Tracking].[Defect ID].&[170], [Defect Tracking].[Defect ID].&[837], [Defect Tracking].[Defect ID].&[168], [Defect Tracking].[Defect ID].&[835] } ) ON COLUMNS FROM ( SELECT ( { [Tank].[Tank ID].&[TC01], [Tank].[Tank ID].&[TC02], [Tank].[Tank ID].&[TC03], [Tank].[Tank ID].&[TC04], [Tank].[Tank ID].&[TC05], [Tank].[Tank ID].&[TC06], [Tank].[Tank ID].&[TC07], [Tank].[Tank ID].&[TC08], [Tank].[Tank ID].&[TC09], [Tank].[Tank ID].&[TC10], [Tank].[Tank ID].&[TC11], [Tank].[Tank ID].&[TC12], [Tank].[Tank ID].&[TC13], [Tank].[Tank ID].&[TC14], [Tank].[Tank ID].&[TC15], [Tank].[Tank ID].&[TC16], [Tank].[Tank ID].&[TC17], [Tank].[Tank ID].&[TC18], [Tank].[Tank ID].&[TC19], [Tank].[Tank ID].&[TC20] } ) ON COLUMNS FROM ( SELECT ( { [Time Crate].[CR_Year].&[2024], [Time Crate].[CR_Year].&[2023] } ) ON COLUMNS FROM [PPD_Actual]))) WHERE ( [Time Crate].[CR_Year].CurrentMember ) CELL PROPERTIES VALUE, BACK_COLOR, FORE_COLOR, FORMATTED_VALUE, FORMAT_STRING, FONT_NAME, FONT_SIZE, FONT_FLAGS"


with Pyadomd(conn_str) as conn:
    with conn.cursor().execute(query_M) as cur:
        df_M = pd.DataFrame(cur.fetchone(), columns=[i.name for i in cur.description])
    with conn.cursor().execute(query_F) as cur:
        df_F = pd.DataFrame(cur.fetchone(), columns=[i.name for i in cur.description])

# Clean this table!
df_cleaned_M = df_M.loc[
    :, [c for c in df_M.columns if c[-20:] != "[MEMBER_UNIQUE_NAME]"]
]  # 去掉"[MEMBER_UNIQUE_NAME]"的columns
df_cleaned_M.columns = [
    c[:-17] if c[-16:] == "[MEMBER_CAPTION]" else c for c in df_cleaned_M.columns
]  # 去掉欄位中的"[MEMBER_CAPTION]"
df_cleaned_M.columns = [c.split(".")[-1][1:-1] for c in df_cleaned_M.columns]
    # 確保日期列是 datetime 格式
df_cleaned_M['CR_Date'] = pd.to_datetime(df_cleaned_M['CR_Date'])

# Clean this table!
df_cleaned_F = df_F.loc[
    :, [c for c in df_F.columns if c[-20:] != "[MEMBER_UNIQUE_NAME]"]
]  # 去掉"[MEMBER_UNIQUE_NAME]"的columns
df_cleaned_F.columns = [
    c[:-17] if c[-16:] == "[MEMBER_CAPTION]" else c for c in df_cleaned_F.columns
]  # 去掉欄位中的"[MEMBER_CAPTION]"
df_cleaned_F.columns = [c.split(".")[-1][1:-1] for c in df_cleaned_F.columns]
    # 確保日期列是 datetime 格式
df_cleaned_F['CR_Date'] = pd.to_datetime(df_cleaned_F['CR_Date'])

df_cleaned_M.to_excel('M_loss.xlsx', index=False) 
df_cleaned_F.to_excel('F_loss.xlsx', index=False) 

import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output, State
import dash_mantine_components as dmc

app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP, dbc.icons.BOOTSTRAP])

tanks = df_cleaned_M["Tank ID"].unique()
defects = df_cleaned_M["Defect ID"].unique()

app.layout = dbc.Container([
    dbc.Row([
        dbc.Col([
            dbc.Card([
                dbc.CardHeader("選擇日期"),
                dbc.CardBody([
                    dmc.DateRangePicker(
                        id='date-picker',
                        minDate='2009-01-01',
                        maxDate=(datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d'),
                        value=[
                            (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d'),
                            (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')
                        ],
                        label="日期範圍",
                        fullWidth=True
                    ),
                    dcc.RadioItems(
                        id='date-shortcuts',
                        options=[
                            {'label': '-1 year', 'value': '1Y'},
                            {'label': '-6 months', 'value': '6M'},
                            {'label': '-1 month', 'value': '1M'},
                            {'label': '-7 days', 'value': '7D'},
                        ],
                        value='1M',  
                        labelStyle={'display': 'inline-block', 'margin-right': '10px'},
                        className="mb-3"
                    ),
                ])
            ], className="mb-3"),
            dbc.Card([
                dbc.CardHeader("選擇Tank"),
                dbc.CardBody([
                    dcc.Dropdown(
                        id='tank-picker',
                        options=[{'label': i, 'value': i} for i in tanks],
                        value=tanks[0]
                    ),
                ]),

@app.callback(
    Output("combined-graph", "figure"),
    Input("tags", "value"),
    Input("date-picker", "value"),
    Input("interval", "value"),
    Input("tank-picker", "value"),
    Input("loss-type", "value"),
    Input("defect-picker", "value"),
    Input("pi-y-axis-setting", "value")  # 新增 Y 軸模式輸入
)
def update_combined_graph(tags, date_range, interval, tank, loss_type, defect, pi_y_axis_mode):
    fig = go.Figure()

    if not date_range or len(date_range) != 2:
        raise PreventUpdate
    start_date, end_date = map(pd.to_datetime, date_range)

    # 处理 Loss 数据
    if loss_type in ['melting', 'finishing', 'melting+finishing']:
        if loss_type == 'melting':
            filtered_df = df_cleaned_M[
                (df_cleaned_M["CR_Date"] >= start_date) &
                (df_cleaned_M["CR_Date"] <= end_date) &
                (df_cleaned_M["Tank ID"] == tank)
            ]
        elif loss_type == 'finishing':
            filtered_df = df_cleaned_F[
                (df_cleaned_F["CR_Date"] >= start_date) &
                (df_cleaned_F["CR_Date"] <= end_date) &
                (df_cleaned_F["Tank ID"] == tank)
            ]
        elif loss_type == 'melting+finishing':
            filtered_df_melting = df_cleaned_M[
                (df_cleaned_M["CR_Date"] >= start_date) &
                (df_cleaned_M["CR_Date"] <= end_date) &
                (df_cleaned_M["Tank ID"] == tank)
            ]
            filtered_df_finishing = df_cleaned_F[
                (df_cleaned_F["CR_Date"] >= start_date) &
                (df_cleaned_F["CR_Date"] <= end_date) &
                (df_cleaned_F["Tank ID"] == tank)
            ]
            filtered_df = pd.concat([filtered_df_melting, filtered_df_finishing])
        print(filtered_df)
        # 繪製 Defect
        if defect:
            final_df = filtered_df[filtered_df['Defect ID'].isin(defect)]
            for selected_defect in defect:
                df_defect = final_df[final_df['Defect ID'] == selected_defect]
                loss_column = (
                    "M_Defect Loss%" if selected_defect in df_cleaned_M["Defect ID"].unique()
                    else "F_Defect Loss%"
                )
                fig.add_trace(go.Bar(
                    x=df_defect["CR_Date"],
                    y=df_defect[loss_column],
                    name=selected_defect,
                    marker_color=defect_colors.get(selected_defect)
                ))
            fig.update_layout(barmode='stack')
        else:
            pass
    else:
        pass
