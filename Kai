from dash import Dash, html, dcc, Input, Output
from dash.exceptions import PreventUpdate
import dash_bootstrap_components as dbc
import dash_mantine_components as dmc
from datetime import datetime, timedelta
import os
import pandas as pd
import PIconnect as PI
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import clr
PI.PIConfig.DEFAULT_TIMEZONE = "Asia/Taipei"

clr.AddReference(os.path.abspath('./Microsoft.AnalysisServices.AdomdClient.dll'))
# clr.AddReference(os.path.abspath('./app/dashapps/tw/melting/campaign_ref/Microsoft.AnalysisServices.AdomdClient.dll'))
clr.AddReference("System.Data")

# 這兩行一定要在clr那兩行後面，且秀error是正常的，因為dll不是python package，clr是讓microsoft的dll函式套件可以讓我們用python控制
from Microsoft.AnalysisServices.AdomdClient import AdomdConnection , AdomdDataAdapter
from System.Data import DataSet


# 選擇固定的顏色板，這裡以 Plotly 的顏色板為例
color_palette = px.colors.qualitative.Plotly
defect_colors = {
    'Cord': "rgb(128, 128, 128)",
    'Inclusion': "rgb(116, 155, 226)",
    'PM Melting': "rgb(128, 56, 193)",
    'Melt Blister': "rgb(138, 205, 67)",

    'Blister': '#008800',
    'Crystalline Pt': '#B3B3B3',
    'Inclusion (Manual)': '#118DFF',
    'Inclusion (IIS)': '#85C5FF',
    'Inclusion (MRS miss)': '#0000CD',
    'Needle Pt': '#E66C37',
    'Other Inclusion': '#F0EA00',
    'Platinum': '#00FFFF',
    'Surface Blister': '#00FF00',
    'Zr': '#8B0000'
}
defect_order = {
    'Blister': 0,
    'Crystalline Pt': 1,
    'Inclusion (Manual)': 2,
    'Inclusion (IIS)': 3,
    'Inclusion (ISIS)': 4,
    'Inclusion (MRS miss)': 5,
    'Needle Pt': 6,
    'Other Inclusion': 7,
    'Platinum': 8,
    'Surface Blister': 9,
    'Zr': 10,
    'Onclusion': 11,
    'Silica': 12,

    'Cord': 13,
    'Melt Blister': 14,
    'Inclusion': 15,
    'PM Melting': 16,
}

def clean_data(df):
    """
    清理 DataFrame 的欄位名稱和數據格式。
    
    :param df: 原始 DataFrame
    :return: 清理後的 DataFrame
    """
    # 去掉 "[MEMBER_UNIQUE_NAME]" 結尾的欄位
    df_cleaned = df.loc[:, [c for c in df.columns if not c.endswith("[MEMBER_UNIQUE_NAME]")]]
    
    # 去掉欄位中的 "[MEMBER_CAPTION]" 後綴
    df_cleaned.columns = [c[:-17] if c.endswith("[MEMBER_CAPTION]") else c for c in df_cleaned.columns]
    
    # 提取欄位名稱的主體部分
    df_cleaned.columns = [c.split(".")[-1][1:-1] for c in df_cleaned.columns]
    
    # 確保日期列是 datetime 格式（如果存在 'CR_Date' 欄位）
    if 'CR_Date' in df_cleaned.columns:
        df_cleaned['CR_Date'] = pd.to_datetime(df_cleaned['CR_Date'], errors='coerce')
    
    return df_cleaned

def get_PPD(query):
    conn = AdomdConnection("Data Source=cgtppd;Catalog=ppd;") #連線字串
    conn.Open() #開啟連線
    cmd = conn.CreateCommand()
    cmd.CommandText = query
    adp = AdomdDataAdapter(cmd)
    dataset = DataSet()
    adp.Fill(dataset)
    conn.Close() #關閉連線

    data_list = []
    for i in range(dataset.Tables[0].Rows.Count):
        row = []
        for j in range(dataset.Tables[0].Columns.Count):
            row.append(dataset.Tables[0].Rows[i][j])
        data_list.append(row)
    columns = [c.ColumnName for c in dataset.Tables[0].Columns]
    df = pd.DataFrame(data_list, columns=columns)
    
    return df

def filter_df(df, start_date, end_date, tank):
    return df[
        (df["CR_Date"] >= start_date) &
        (df["CR_Date"] <= end_date) &
        (df["Tank ID"] == tank)
    ]

def layout(dashapp):
    return dbc.Col([
        dbc.Label("Process and Performance mapping"),
        dbc.Card([
            dbc.Row([ ## Powered by Kai Chen
                dbc.Label("Powered by Kai Chen"),
            ], class_name='ms-auto'),
            dbc.Row([ ## Choose Date - Date picker
                dbc.Col(
                    dbc.Label("Choose Date"),
                    width=12, lg=3,
                    class_name="d-flex align-items-center",
                ),
                dbc.Col(
                    dmc.DateRangePicker(
                        id='date-picker',
                        minDate='2009-01-01',
                        maxDate=(datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d'),
                        value=[
                            (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d'),
                            (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')
                        ],
                        fullWidth=True
                    ),
                    width=12, lg=9
                ),
            ], class_name='mb-3'),
            dbc.Row([ ## Choose Date - RadioItems
                dbc.Col(
                    dbc.Label(" "),
                    width=12, lg=3,
                    class_name="d-flex align-items-center",
                ),
                dbc.Col(
                    dcc.RadioItems(
                        id='date-shortcuts',
                        options=[
                            {'label': '-1 year', 'value': '1Y'},
                            {'label': '-6 months', 'value': '6M'},
                            {'label': '-1 month', 'value': '1M'},
                            {'label': '-7 days', 'value': '7D'},
                        ],
                        value='1M',  
                        labelStyle={'display': 'inline-block', 'margin-right': '10px'},
                        inline=True,
                        className="mb-3"
                    ),
                    width=12, lg=9
                ),
            ], class_name='mb-3'),
            dbc.Row([ ## Choose Tank
                dbc.Col(
                    dbc.Label("Choose Tank"),
                    width=12, lg=3,
                    class_name="d-flex align-items-center",
                ),
                dbc.Col(
                    dcc.Dropdown(
                        id='tank-picker',
                        options=[{'label': f'TC{str(i).zfill(2)}', 'value': f'TC{str(i).zfill(2)}'} for i in range(1,22)],
                        value='TC01'
                    ),
                    width=12, lg=9
                ),
            ], class_name='mb-3'),
            dbc.Row([ ## Choose Loss Type
                dbc.Col(
                    dbc.Label("Choose Loss Type"),
                    width=12, lg=3,
                    class_name="d-flex align-items-center",
                ),
                dbc.Col(
                    dcc.Dropdown(
                        id='loss-type',
                        options=[
                            {'label': 'Melting Loss', 'value': 'melting'},
                            {'label': 'Finishing Loss', 'value': 'finishing'},
                            {'label': 'Melting + Finishing loss', 'value': 'melting+finishing'}
                        ],
                        value='melting',  # 預設值為 melting
                    ),
                    width=12, lg=9
                ),
            ], class_name='mb-3'),
            dbc.Row([ ## Choose Defects
                dbc.Col(
                    dbc.Label("Choose Defects"),
                    width=12, lg=3,
                    class_name="d-flex align-items-center",
                ),
                dbc.Col(
                    dcc.Dropdown(
                        id="defect-picker",
                        multi=True,  # 支持多選
                        options=[],  # 初始為空，通過 callback 動態更新
                        value=[]     # 初始值為空，通過 callback 動態更新
                    ),
                    width=12, lg=9
                ),
            ], class_name='mb-3'),
            dbc.Row([ ## Choose Pi Data Interval
                dbc.Col(
                    dbc.Label("Choose Pi Data Interval"),
                    width=12, lg=3,
                    class_name="d-flex align-items-center",
                ),
                dbc.Col(
                    dcc.RadioItems(
                        id="interval",
                        options=[
                            {"label": "Daily", "value": "d"},
                            {"label": "Hourly", "value": "h"},
                            {"label": "5min", "value": "5m"},
                            {"label": "1min", "value": "1m"},
                            {"label": "5s", "value": "5s"}
                        ],
                        value="d",
                        labelStyle={'display': 'inline-block', 'margin-right': '10px'},
                        inline=True
                    ),
                    width=12, lg=9
                ),
            ], class_name='mb-3'),
            dbc.Row([ ## Choose Pi Tags
                dbc.Col(
                    dbc.Label("Choose Pi Tags"),
                    width=12, lg=3,
                    class_name="d-flex align-items-center",
                ),
                dbc.Col(
                    dcc.Dropdown(
                        options=[],
                        multi=True,
                        id="tags",
                        className="mb-3",
                    ),
                    width=12, lg=9
                ),
            ], class_name='mb-3'),
            dbc.Row([ ## Choose Y axis setting
                dbc.Col(
                    dbc.Label("Choose Y axis setting"),
                    width=12, lg=3,
                    class_name="d-flex align-items-center",
                ),
                dbc.Col(
                    dcc.RadioItems(
                        id="pi-y-axis-setting",
                        options=[
                            {'label': 'Single', 'value': 'single'},
                            {'label': 'Multiple', 'value': 'multiple'}
                        ],
                        value='multiple',  # 預設為 multiple 模式
                        inline=True,
                        labelStyle={'display': 'inline-block', 'margin-right': '10px'},
                        style={'margin-bottom': '10px'}
                    ),
                    width=12, lg=9
                ),
            ], class_name='mb-3'),
            dbc.Row([ ## Chart Display
                dbc.Col(
                    dbc.Label("Chart Display"),
                    width=12, lg=3,
                    class_name="d-flex align-items-center",
                ),
                dbc.Col(
                    dcc.Loading(  # 添加加載進度條
                        id="loading-graph",
                        type="default",  # 可以設置為 "default" 或 "graph"
                        children=[
                            dcc.Graph(
                                id="combined-graph",
                                style={"height": "500px"},
                            ),
                        ],
                    ),
                    width=12, lg=9
                ),
            ], class_name='mb-3'),
        ], class_name="dashboard p-3"),
        dcc.Store(id='filtered-data-melting', data=[]),  # 用於緩存 Melting Loss 資料
        dcc.Store(id='filtered-data-finishing', data=[]),  # 用於緩存 Finishing Loss 資料
    ])

app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP, dbc.icons.BOOTSTRAP])
app.layout = layout(0)

# def callbacks(dashapp):
#動態更新當前日期
@app.callback(
    Output('date-picker', 'maxDate'),
    Input('date-picker', 'id')
)
def update_max_date(_):
    return (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')

@app.callback(
    Output("filtered-data-melting", "data"),
    Output("filtered-data-finishing", "data"),
    Input("date-picker", "value"),
    Input("tank-picker", "value")
)
def query_data(date_range, tank):
    if not date_range or not tank:
        raise PreventUpdate  # 如果条件不完整，则不触发查询

    start_date, end_date = map(pd.to_datetime, date_range)

    # 查询 Melting Loss 数据
    query_m = f"""
        SELECT 
            NON EMPTY {{ [Measures].[M_Defect Loss%] }} ON COLUMNS, 
            NON EMPTY {{ ([Time Crate].[CR_Time YQMD].[CR_Date].ALLMEMBERS * 
                            [Tank].[Tank ID].&[{tank}] *
                            [Defect Tracking].[Defect ID].[Defect ID].ALLMEMBERS) }} 
            DIMENSION PROPERTIES MEMBER_CAPTION, MEMBER_UNIQUE_NAME 
        ON ROWS 
        FROM ( 
            SELECT ({{ [Time Crate].[CR_Date].&[{start_date.strftime("%Y-%m-%dT00:00:00")}] : 
                        [Time Crate].[CR_Date].&[{end_date.strftime("%Y-%m-%dT00:00:00")}] }}) 
            ON COLUMNS 
            FROM [PPD_Actual]
        ) 
        WHERE ( [Defect Tracking].[Defect Group].&[M_Melt Loss] ) 
        CELL PROPERTIES VALUE, BACK_COLOR, FORE_COLOR, FORMATTED_VALUE, FORMAT_STRING, FONT_NAME, FONT_SIZE, FONT_FLAGS
    """

    # 查询 Finishing Loss 数据
    query_f = f"""
        SELECT NON EMPTY {{ [Measures].[F_Defect Loss%] }} ON COLUMNS, 
            NON EMPTY {{ ([Time Crate].[CR_Time YQMD].[CR_Date].ALLMEMBERS * 
                            [Tank].[Tank ID].&[{tank}] *
                            [Defect Tracking].[Defect ID].[Defect ID].ALLMEMBERS) }} 
            DIMENSION PROPERTIES MEMBER_CAPTION, MEMBER_UNIQUE_NAME 
        ON ROWS 
        FROM ( 
            SELECT (
                {{ [Defect Tracking].[Defect ID].&[165], 
                [Defect Tracking].[Defect ID].&[1028], 
                [Defect Tracking].[Defect ID].&[311], 
                [Defect Tracking].[Defect ID].&[252], 
                [Defect Tracking].[Defect ID].&[407], 
                [Defect Tracking].[Defect ID].&[171], 
                [Defect Tracking].[Defect ID].&[838], 
                [Defect Tracking].[Defect ID].&[169], 
                [Defect Tracking].[Defect ID].&[836], 
                [Defect Tracking].[Defect ID].&[167], 
                [Defect Tracking].[Defect ID].&[834], 
                [Defect Tracking].[Defect ID].&[170], 
                [Defect Tracking].[Defect ID].&[837], 
                [Defect Tracking].[Defect ID].&[168], 
                [Defect Tracking].[Defect ID].&[835] }} 
        ) ON COLUMNS 
        FROM ( 
            SELECT ({{ [Time Crate].[CR_Date].&[{start_date.strftime("%Y-%m-%dT00:00:00")}] : 
                        [Time Crate].[CR_Date].&[{end_date.strftime("%Y-%m-%dT00:00:00")}] }}) 
            ON COLUMNS 
            FROM [PPD_Actual]
        ) 
        WHERE ( [Time Crate].[CR_Date].CurrentMember ) )
        CELL PROPERTIES VALUE, BACK_COLOR, FORE_COLOR, FORMATTED_VALUE, FORMAT_STRING, FONT_NAME, FONT_SIZE, FONT_FLAGS
    """

    try:
        # 数据清理
        df_cleaned_M = clean_data(get_PPD(query_m))
        df_cleaned_F = clean_data(get_PPD(query_f))
        # 将数据转换为字典格式返回
        return df_cleaned_M.to_dict("records"), df_cleaned_F.to_dict("records")
        
    except Exception as e:
        print("Error occurred during query execution:")
        print(e)
        return [], []

@app.callback(
    Output('date-picker', 'value'),
    Input('date-shortcuts', 'value')
)
def update_datepicker(selected_period):
    today = datetime.today()
    dic = {
        '1Y': 365,
        '6M': 182,
        '1M': 30,
        '7D': 7,
    }

    start_date = today - timedelta(days=dic[selected_period])
    end_date = today + timedelta(days=1)

    return [start_date.strftime('%Y-%m-%d'), end_date.strftime('%Y-%m-%d')]

@app.callback(
    Output("defect-picker", "options"),  # 更新 defect-picker 的選項
    Output("defect-picker", "value"),  # 更新 defect-picker 的預設值
    Input("loss-type", "value"),         # 當 loss-type 改變時觸發
    Input("tank-picker", "value"),       # 當 tank 改變時也觸發
    Input("date-picker", "value"),      # 當日期範圍改變時觸發
    Input("filtered-data-melting", "data"),  # 輸入 melting 數據
    Input("filtered-data-finishing", "data")  # 輸入 finishing 數據
)
def update_defect_picker(loss_type, tank, date_range, data_melting, data_finishing):
    if not date_range or len(date_range) != 2 or not tank:
        return [], []  # 如果輸入不完整，返回空選項和清空選擇

    start_date, end_date = map(pd.to_datetime, date_range)

    # 將輸入的字典格式數據轉換為 DataFrame
    if data_melting:
        df_cleaned_M = pd.DataFrame(data_melting)
        df_cleaned_M["CR_Date"] = pd.to_datetime(df_cleaned_M["CR_Date"], errors="coerce")
    else:
        df_cleaned_M = pd.DataFrame()

    if data_finishing:
        df_cleaned_F = pd.DataFrame(data_finishing)
        df_cleaned_F["CR_Date"] = pd.to_datetime(df_cleaned_F["CR_Date"], errors="coerce")
    else:
        df_cleaned_F = pd.DataFrame()

    # 檢查資料是否存在
    if df_cleaned_M.empty and df_cleaned_F.empty:
        return [], []  # 如果沒有資料，返回空選項和清空選擇

    # 根據 loss_type 合併數據
    if loss_type == 'melting+finishing':
        filtered_df_melting = df_cleaned_M[
            (df_cleaned_M["Tank ID"] == tank) &
            (df_cleaned_M["CR_Date"] >= start_date) &
            (df_cleaned_M["CR_Date"] <= end_date)
        ]
        filtered_df_finishing = df_cleaned_F[
            (df_cleaned_F["Tank ID"] == tank) &
            (df_cleaned_F["CR_Date"] >= start_date) &
            (df_cleaned_F["CR_Date"] <= end_date)
        ]
        filtered_df = pd.concat([filtered_df_melting, filtered_df_finishing])
    elif loss_type == 'melting':
        filtered_df = df_cleaned_M[
            (df_cleaned_M["Tank ID"] == tank) &
            (df_cleaned_M["CR_Date"] >= start_date) &
            (df_cleaned_M["CR_Date"] <= end_date)
        ]
    elif loss_type == 'finishing':
        filtered_df = df_cleaned_F[
            (df_cleaned_F["Tank ID"] == tank) &
            (df_cleaned_F["CR_Date"] >= start_date) &
            (df_cleaned_F["CR_Date"] <= end_date)
        ]
    else:
        return [], []

    # 獲取唯一的 Defect ID 選項
    all_defects = filtered_df["Defect ID"].dropna().unique()
    defect_options = [{"label": defect, "value": defect} for defect in all_defects]
    # 默認選中所有 Defect
    default_values = list(all_defects)

    return defect_options, default_values

@app.callback(
    Output("tags", "options"), 
    Input("tank-picker", "value")
)
def update_tags_options(Tank_ID):
    with PI.PIServer(server="grape") as server:
        points = server.search(f'*T{Tank_ID}*')
        pi_tags = [p.name for p in points]

    return pi_tags

@app.callback(
    Output("combined-graph", "figure"),
    Input("tags", "value"),
    Input("date-picker", "value"),
    Input("interval", "value"),
    Input("tank-picker", "value"),
    Input("loss-type", "value"),
    Input("defect-picker", "value"),
    Input("pi-y-axis-setting", "value"),  # 新增 Y 軸模式輸入
    Input("filtered-data-melting", "data"),  # 輸入 Melting 數據
    Input("filtered-data-finishing", "data")  # 輸入 Finishing 數據
)
def update_combined_graph(tags, date_range, interval, tank, loss_type, defect, pi_y_axis_mode, data_melting, data_finishing):
    fig = go.Figure()

    if not date_range or len(date_range) != 2 or not tank:
        raise PreventUpdate  # 如果輸入條件不足，則不更新圖表
        # 檢查資料是否存在

    if not data_melting and not data_finishing:
        fig.add_annotation(
            text="No data available for the selected period (Cold Repair)",
            xref="paper", yref="paper",
            x=0.5, y=0.5, showarrow=False,
            font=dict(size=20)
        )
        return fig

    start_date, end_date = map(pd.to_datetime, date_range)

    # 將輸入的字典格式數據轉換為 DataFrame
    df_cleaned_M, df_cleaned_F = pd.DataFrame(), pd.DataFrame()
    if data_melting:
        df_cleaned_M = pd.DataFrame(data_melting)
        df_cleaned_M["CR_Date"] = pd.to_datetime(df_cleaned_M["CR_Date"], errors="coerce")        
    if data_finishing:
        df_cleaned_F = pd.DataFrame(data_finishing)
        df_cleaned_F["CR_Date"] = pd.to_datetime(df_cleaned_F["CR_Date"], errors="coerce")
    
    # 根據 loss_type 合併數據
    if loss_type == 'melting':
        filtered_df = filter_df(df_cleaned_M, start_date, end_date, tank)
    elif loss_type == 'finishing':
        filtered_df = filter_df(df_cleaned_F, start_date, end_date, tank)
    elif loss_type == 'melting+finishing':
        filtered_df_melting = filter_df(df_cleaned_M, start_date, end_date, tank)
        filtered_df_finishing = filter_df(df_cleaned_F, start_date, end_date, tank)
        filtered_df = pd.concat([filtered_df_melting, filtered_df_finishing])

    if defect:
        final_df = filtered_df[filtered_df['Defect ID'].isin(defect)]
        defect = sorted(defect, key=lambda v: defect_order[v])
        for selected_defect in defect:
            marker_pattern_shape = "x" if selected_defect in ['Inclusion', 'Melt Blister', 'Cord', 'PM Melting'] else ""
            df_defect = final_df[final_df['Defect ID'] == selected_defect]
            loss_column = (
                "M_Defect Loss%" if selected_defect in df_cleaned_M["Defect ID"].unique()
                else "F_Defect Loss%"
            )
            fig.add_trace(go.Bar(
                x=df_defect["CR_Date"],
                y=df_defect[loss_column],
                name=selected_defect,
                marker_color=defect_colors.get(selected_defect),
                marker_pattern_shape=marker_pattern_shape
            ))
        fig.update_layout(barmode='stack')

    # 如果有選擇 PI tags 且有日期範圍，則提取並繪製 PI 數據
    if tags and start_date and end_date:
        servername = "grape"  # 設定 PI 伺服器名稱
        with PI.PIServer(server=servername) as server:
            points = server.search(tags)  # 搜尋所選的 PI tags
            if len(points) > 0:
                series = []
                for p in points:
                    # 使用選擇的頻率取樣數據
                    sample_interval_dic = {'d': '30m', 'h': '30m', '5m': '5m', '1m': '1m' , '5s': '5s'}
                    data = p.interpolated_values(
                        start_time=start_date,
                        end_time=end_date,
                        interval=sample_interval_dic[interval]
                    )
                    
                    # 將數據轉換為 DataFrame 並重新設置索引
                    interpolated_data = pd.DataFrame(data).reset_index()
                    interpolated_data.columns = ['Timestamp', p.name]
                    interpolated_data = interpolated_data[pd.to_numeric(interpolated_data[p.name], errors='coerce').notnull()]
                    interpolated_data['Timestamp'] = pd.to_datetime(interpolated_data['Timestamp'])
                    interpolated_data.set_index('Timestamp', inplace=True)

                    # 根據使用者選擇的 interval 將數據重新取樣
                    resample_interval_dic = {'d': '1D', 'h': '1h', '5m': '5min', '1m': '1min', '5s': '5s'}
                    resampled_data = interpolated_data.resample(resample_interval_dic[interval]).mean()

                    series.append(resampled_data)  # 將每個 Tag 的數據加入 series 清單

                # 合併所有 PI tags 數據
                df = pd.concat(series, axis=1)

                # 設定顏色循環，避免顏色數量限制
                for idx, tag in enumerate(tags):
                    if tag not in df.columns:
                        continue

                    position = 1 if pi_y_axis_mode == 'single' else 1 - 0.04 * idx
                    font_color = 'black' if pi_y_axis_mode == 'single' else color_palette[idx % len(color_palette)]

                    y_idx_nd = '' if idx == 0 else idx+1
                    y_idx_nd = 2 if pi_y_axis_mode == 'single' else y_idx_nd
                    y_idx_d = 2 if pi_y_axis_mode == 'single' else idx+2
                    y_idx = y_idx_d if defect else y_idx_nd
                    
                    fig.add_trace(go.Scatter(
                        x=df.index,
                        y=df[tag],
                        mode='lines',
                        name=tag,
                        line=dict(color=color_palette[idx % len(color_palette)]),
                        yaxis=f'y{y_idx}',  # 主 Y 軸
                    ))
                    fig.update_layout(**{
                        f'yaxis{y_idx}': dict(
                            side='right',
                            position=position,
                            titlefont=dict(color=font_color),
                            tickfont=dict(color=font_color),
                        )
                    })
                    
                    if defect or (pi_y_axis_mode == 'multiple' and idx != 0):
                        fig.update_layout(**{f'yaxis{y_idx}': dict(overlaying='y')})
    
    # 計算總共的 Y 軸數量
    total_y_axes = len(tags) if tags else 1  # 預設至少有主 Y 軸

    # 動態調整 X 軸 domain（減少退縮範圍）
    x_domain_end = 1 if pi_y_axis_mode == 'single' else 1- ((total_y_axes - 1) * 0.04) 

    # 更新圖表的佈局和標題
    fig.update_layout(
        showlegend=True,
        title=dict(
            text=f'<B>{tank} Inclusion loss and Process Chart' if defect else f'{tank} Process Chart</B>',
            automargin=True,
            font_size=18
        ),
        title_x=0.5,
        xaxis=dict(
            domain=[0, x_domain_end],  # 動態設定 X 軸的 domain 範圍
            tickformat='%Y-%m-%d\n%H:%M:%S',
        ),
        yaxis=dict(tickformat='.1%', title='loss%') if defect else dict(tickformat='f', title='Value'),
        height=550,
        margin=dict(
            b=0, 
            l=0, 
            r=90 + (total_y_axes / 3) * 30,  # 動態增加右邊邊距，避免軸標題擁擠
            t=0  # 頂部邊距根據 defect 數量動態調整
        ),
        dragmode='zoom',
        legend=dict(orientation="h", yanchor="bottom", x=1, y=1.02, xanchor="right", font_size=12,),
    )

    return fig  # 回傳更新後的圖表








if __name__ == '__main__':
    app.run_server(debug=True, port='8888')
