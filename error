from dash import Dash, html, dcc, Input, Output
from dash.exceptions import PreventUpdate
import dash_bootstrap_components as dbc
import dash_mantine_components as dmc
from datetime import datetime, timedelta
import os
import pandas as pd
import PIconnect as PI
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import clr
PI.PIConfig.DEFAULT_TIMEZONE = "Asia/Taipei"

clr.AddReference(os.path.abspath('./Microsoft.AnalysisServices.AdomdClient.dll'))
# clr.AddReference(os.path.abspath('./app/dashapps/tw/melting/campaign_ref/Microsoft.AnalysisServices.AdomdClient.dll'))
clr.AddReference("System.Data")

# 這兩行一定要在clr那兩行後面，且秀error是正常的，因為dll不是python package，clr是讓microsoft的dll函式套件可以讓我們用python控制
from Microsoft.AnalysisServices.AdomdClient import AdomdConnection , AdomdDataAdapter
from System.Data import DataSet


# 選擇固定的顏色板，這裡以 Plotly 的顏色板為例
color_palette = px.colors.qualitative.Plotly
defect_colors = {
    'Cord': "rgb(128, 128, 128)",
    'Inclusion': "rgb(116, 155, 226)",
    'PM Melting': "rgb(128, 56, 193)",
    'Melt Blister': "rgb(138, 205, 67)",

    'Blister': '#008800',
    'Crystalline Pt': '#B3B3B3',
    'Inclusion (Manual)': '#118DFF',
    'Inclusion (IIS)': '#85C5FF',
    'Inclusion (MRS miss)': '#0000CD',
    'Needle Pt': '#E66C37',
    'Other Inclusion': '#F0EA00',
    'Platinum': '#00FFFF',
    'Surface Blister': '#00FF00',
    'Zr': '#8B0000'
}
defect_order = {
    'Blister': 0,
    'Crystalline Pt': 1,
    'Inclusion (Manual)': 2,
    'Inclusion (IIS)': 3,
    'Inclusion (ISIS)': 4,
    'Inclusion (MRS miss)': 5,
    'Needle Pt': 6,
    'Other Inclusion': 7,
    'Platinum': 8,
    'Surface Blister': 9,
    'Zr': 10,
    'Onclusion': 11,
    'Silica': 12,

    'Cord': 13,
    'Melt Blister': 14,
    'Inclusion': 15,
    'PM Melting': 16,
}

def clean_data(df):
    """
    清理 DataFrame 的欄位名稱和數據格式。
    
    :param df: 原始 DataFrame
    :return: 清理後的 DataFrame
    """
    # 去掉 "[MEMBER_UNIQUE_NAME]" 結尾的欄位
    df_cleaned = df.loc[:, [c for c in df.columns if not c.endswith("[MEMBER_UNIQUE_NAME]")]]
    
    # 去掉欄位中的 "[MEMBER_CAPTION]" 後綴
    df_cleaned.columns = [c[:-17] if c.endswith("[MEMBER_CAPTION]") else c for c in df_cleaned.columns]
    
    # 提取欄位名稱的主體部分
    df_cleaned.columns = [c.split(".")[-1][1:-1] for c in df_cleaned.columns]
    
    # 確保日期列是 datetime 格式（如果存在 'CR_Date' 欄位）
    if 'CR_Date' in df_cleaned.columns:
        df_cleaned['CR_Date'] = pd.to_datetime(df_cleaned['CR_Date'], errors='coerce')
    
    return df_cleaned

def get_PPD(query):
    conn = AdomdConnection("Data Source=cgtppd;Catalog=ppd;") #連線字串
    conn.Open() #開啟連線
    cmd = conn.CreateCommand()
    cmd.CommandText = query
    adp = AdomdDataAdapter(cmd)
    dataset = DataSet()
    adp.Fill(dataset)
    conn.Close() #關閉連線

    data_list = []
    for i in range(dataset.Tables[0].Rows.Count):
        row = []
        for j in range(dataset.Tables[0].Columns.Count):
            row.append(dataset.Tables[0].Rows[i][j])
        data_list.append(row)
    columns = [c.ColumnName for c in dataset.Tables[0].Columns]
    df = pd.DataFrame(data_list, columns=columns)
    
    return df

def filter_df(df, start_date, end_date, tank):
    return df[
        (df["CR_Date"] >= start_date) &
        (df["CR_Date"] <= end_date) &
        (df["Source Tank ID"] == tank)
    ]

def layout(dashapp):
    return dbc.Col([
        dbc.Label("Process and Performance mapping"),
        dbc.Card([
            dbc.Row([ ## Powered by Kai Chen
                dbc.Label("Powered by Kai Chen"),
            ], class_name='ms-auto'),
            dbc.Row([ ## Choose Date - Date picker
                dbc.Col(
                    dbc.Label("Choose Date"),
                    width=12, lg=3,
                    class_name="d-flex align-items-center",
                ),
                dbc.Col(
                    dmc.DateRangePicker(
                        id='date-picker',
                        minDate='2009-01-01',
                        maxDate=(datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d'),
                        value=[
                            (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d'),
                            (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')
                        ],
                        fullWidth=True
                    ),
                    width=12, lg=9
                ),
            ], class_name='mb-3'),
            dbc.Row([ ## Choose Date - RadioItems
                dbc.Col(
                    dbc.Label(" "),
                    width=12, lg=3,
                    class_name="d-flex align-items-center",
                ),
                dbc.Col(
                    dcc.RadioItems(
                        id='date-shortcuts',
                        options=[
                            {'label': '-1 year', 'value': '1Y'},
                            {'label': '-6 months', 'value': '6M'},
                            {'label': '-1 month', 'value': '1M'},
                            {'label': '-7 days', 'value': '7D'},
                        ],
                        value='1M',  
                        labelStyle={'display': 'inline-block', 'margin-right': '10px'},
                        inline=True,
                        className="mb-3"
                    ),
                    width=12, lg=9
                ),
            ], class_name='mb-3'),
            dbc.Row([ ## Choose Tank
                dbc.Col(
                    dbc.Label("Choose Tank"),
                    width=12, lg=3,
                    class_name="d-flex align-items-center",
                ),
                dbc.Col(
                    dcc.Dropdown(
                        id='tank-picker',
                        options=[{'label': f'TC{str(i).zfill(2)}', 'value': f'TC{str(i).zfill(2)}'} for i in range(1,22)],
                        value='TC01'
                    ),
                    width=12, lg=9
                ),
            ], class_name='mb-3'),
            dbc.Row([ ## Choose Loss Type
                dbc.Col(
                    dbc.Label("Choose Loss Type"),
                    width=12, lg=3,
                    class_name="d-flex align-items-center",
                ),
                dbc.Col(
                    dcc.Dropdown(
                        id='loss-type',
                        options=[
                            {'label': 'Melting Loss', 'value': 'melting'},
                            {'label': 'Finishing Loss', 'value': 'finishing'},
                            {'label': 'Melting + Finishing loss', 'value': 'melting+finishing'}
                        ],
                        value='melting',  # 預設值為 melting
                    ),
                    width=12, lg=9
                ),
            ], class_name='mb-3'),
            dbc.Row([ ## Choose Gen size
                dbc.Col(
                    dbc.Label("Choose Gen Size"),
                    width=12, lg=3,
                    class_name="d-flex align-items-center",
                ),
                dbc.Col(
                    dcc.Dropdown(
                        id="gen-picker",
                        multi=True,  # 支持多選
                        options=[],  # 初始為空，通過 callback 動態更新
                        value=[]     # 初始值為空，通過 callback 動態更新
                    ),
                    width=12, lg=9
                ),
            ], class_name='mb-3'),
            dbc.Row([ ## Choose thickness
                dbc.Col(
                    dbc.Label("Choose Thickness"),
                    width=12, lg=3,
                    class_name="d-flex align-items-center",
                ),
                dbc.Col(
                    dcc.Dropdown(
                        id="thickness-picker",
                        multi=True,  # 支持多選
                        options=[],  # 初始為空，通過 callback 動態更新
                        value=[]     # 初始值為空，通過 callback 動態更新
                    ),
                    width=12, lg=9
                ),
            ], class_name='mb-3'),
            dbc.Row([ ## Choose finishing line
                dbc.Col(
                    dbc.Label("Choose Finishing Line"),
                    width=12, lg=3,
                    class_name="d-flex align-items-center",
                ),
                dbc.Col(
                    dcc.Dropdown(
                        id="line-picker",
                        multi=True,  # 支持多選
                        options=[],  # 初始為空，通過 callback 動態更新
                        value=[]     # 初始值為空，通過 callback 動態更新
                    ),
                    width=12, lg=9
                ),
            ], class_name='mb-3'),
            dbc.Row([ ## Choose Defects
                dbc.Col(
                    dbc.Label("Choose Defects"),
                    width=12, lg=3,
                    class_name="d-flex align-items-center",
                ),
                dbc.Col(
                    dcc.Dropdown(
                        id="defect-picker",
                        multi=True,  # 支持多選
                        options=[],  # 初始為空，通過 callback 動態更新
                        value=[]     # 初始值為空，通過 callback 動態更新
                    ),
                    width=12, lg=9
                ),
            ], class_name='mb-3'),
            dbc.Row([ ## Choose Pi Data Interval
                dbc.Col(
                    dbc.Label("Choose Pi Data Interval"),
                    width=12, lg=3,
                    class_name="d-flex align-items-center",
                ),
                dbc.Col(
                    dcc.RadioItems(
                        id="interval",
                        options=[
                            {"label": "Daily", "value": "d"},
                            {"label": "Hourly", "value": "h"},
                            {"label": "5min", "value": "5m"},
                            {"label": "1min", "value": "1m"},
                            {"label": "5s", "value": "5s"}
                        ],
                        value="d",
                        labelStyle={'display': 'inline-block', 'margin-right': '10px'},
                        inline=True
                    ),
                    width=12, lg=9
                ),
            ], class_name='mb-3'),
            dbc.Row([ ## Choose Pi Tags
                dbc.Col(
                    dbc.Label("Choose Pi Tags"),
                    width=12, lg=3,
                    class_name="d-flex align-items-center",
                ),
                dbc.Col(
                    dcc.Dropdown(
                        options=[],
                        multi=True,
                        id="tags",
                        className="mb-3",
                    ),
                    width=12, lg=9
                ),
            ], class_name='mb-3'),
            dbc.Row([ ## Choose Y axis setting
                dbc.Col(
                    dbc.Label("Choose Y Axis Setting"),
                    width=12, lg=3,
                    class_name="d-flex align-items-center",
                ),
                dbc.Col(
                    dcc.RadioItems(
                        id="pi-y-axis-setting",
                        options=[
                            {'label': 'Single', 'value': 'single'},
                            {'label': 'Multiple', 'value': 'multiple'}
                        ],
                        value='multiple',  # 預設為 multiple 模式
                        inline=True,
                        labelStyle={'display': 'inline-block', 'margin-right': '10px'},
                        style={'margin-bottom': '10px'}
                    ),
                    width=12, lg=9
                ),
            ], class_name='mb-3'),
            dbc.Row([ ## Chart Display
                dbc.Col(
                    dbc.Label("Chart Display"),
                    width=12, lg=3,
                    class_name="d-flex align-items-center",
                ),
                dbc.Col(
                    dcc.Loading(  # 添加加載進度條
                        id="loading-graph",
                        type="default",  # 可以設置為 "default" 或 "graph"
                        children=[
                            dcc.Graph(
                                id="combined-graph",
                                style={"height": "500px"},
                            ),
                        ],
                    ),
                    width=12, lg=9
                ),
            ], class_name='mb-3'),
        ], class_name="dashboard p-3"),
        dcc.Store(id='filtered-data-melting', data=[]),  # 用於緩存 Melting Loss 資料
        dcc.Store(id='filtered-data-finishing', data=[]),  # 用於緩存 Finishing Loss 資料
    ])

app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP, dbc.icons.BOOTSTRAP])
app.layout = layout(0)

# def callbacks(dashapp):
#動態更新當前日期
@app.callback(
    Output('date-picker', 'maxDate'),
    Input('date-picker', 'id')
)
def update_max_date(_):
    return (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')

@app.callback( #此PPD query data為即時更新gen size, thickness, Finishing line的選項用(只有finishing data需要)
    Output("gen-picker", "options"),  # 更新 gen size 的選項
    Output("thickness-picker", "options"),  # 更新 thickness 的選項
    Output("line-picker", "options"),  # 更新 Finishing line 的選項
    Output("gen-picker", "value"),  # 更新 gen size 的預設值
    Output("thickness-picker", "value"),  # 更新 thickness 的預設值
    Output("line-picker", "value"),  # 更新 Finishing line 的預設值
    Input("date-picker", "value"),
    Input("tank-picker", "value")
)
def query_data(date_range, tank):
    if not date_range or not tank:
        raise PreventUpdate
    
    start_date, end_date = map(pd.to_datetime, date_range)

    query_f = f"""
    SELECT NON EMPTY {{ [Measures].[F_Defect Loss%] }} ON COLUMNS, 
        NON EMPTY {{ ([Time Crate].[CR_Time YQMD].[CR_Date].ALLMEMBERS * 
                        [Finishing Source Tank].[Source Tank ID].&[{tank}] *
                        [FG Product].[FG_Gen].[FG_Gen].ALLMEMBERS * 
                        [FG Product].[FG_Thickness].[FG_Thickness].ALLMEMBERS * 
                        [Finishing Line].[Line ID].[Line ID].ALLMEMBERS) }} 
        DIMENSION PROPERTIES MEMBER_CAPTION, MEMBER_UNIQUE_NAME
    ON ROWS 
    FROM ( 
        SELECT ({{ [Time Crate].[CR_Date].&[{start_date.strftime("%Y-%m-%dT00:00:00")}] : 
                    [Time Crate].[CR_Date].&[{end_date.strftime("%Y-%m-%dT00:00:00")}] }}) 
        ON COLUMNS 
     FROM ( 
        SELECT ({{ [Production Type].[Production Type Hierarchy].[Lot Type／Scheduled].&[F-Normal], 
                    [Production Type].[Production Type Hierarchy].[SubType].&[F-Div], 
                    [Production Type].[Production Type Hierarchy].[SubType].&[F-Engineering], 
                    [Production Type].[Production Type Hierarchy].[SubType].&[F-Plant] }}) 
                    ON COLUMNS 
        FROM [PPD_Actual]
    ) )
    WHERE ( [Time Crate].[CR_Date].CurrentMember ) 
    CELL PROPERTIES VALUE, BACK_COLOR, FORE_COLOR, FORMATTED_VALUE, FORMAT_STRING, FONT_NAME, FONT_SIZE, FONT_FLAGS
    """

    try:
        # 數據清理
        df_cleaned_F = clean_data(get_PPD(query_f))
        df_cleaned_F.to_excel('loss_F.xlsx', index=False)
        # 獲取唯一的 Defect ID 選項
        all_gen = df_cleaned_F["FG_Gen"].dropna().unique()
        all_thickness = df_cleaned_F["FG_Thickness"].dropna().unique()
        all_line = df_cleaned_F["Line ID"].dropna().unique()
        gen_options = [{"label": gen, "value": gen} for gen in all_gen]
        thickness_options = [{"label": thickness, "value": thickness} for thickness in all_thickness]
        line_options = [{"label": line, "value": line} for line in all_line]
        # 默認選中所有 Defect
        gen_default = list(all_gen)
        thickness_default = list(all_thickness)
        line_default = list(all_line)

        return gen_options, thickness_options, line_options, gen_default, thickness_default, line_default

        
    except Exception as e:
        print("Error occurred during query execution:")
        print(e)
        return [], []
    
#####

@app.callback(  #此PPD query data為最後performance data畫圖用
    Output("filtered-data-melting", "data"),
    Output("filtered-data-finishing", "data"),
    Input("date-picker", "value"),
    Input("tank-picker", "value")
)
def query_data(date_range, tank): 
    if not date_range or not tank:
        raise PreventUpdate  

    start_date, end_date = map(pd.to_datetime, date_range)

    # 查詢 Melting Loss 
    query_m = f"""
        SELECT 
            NON EMPTY {{ [Measures].[M_Defect Loss%] }} ON COLUMNS, 
            NON EMPTY {{ ([Time Crate].[CR_Time YQMD].[CR_Date].ALLMEMBERS * 
                            [Finishing Source Tank].[Source Tank ID].&[{tank}] *
                            [Defect Tracking].[Defect ID].[Defect ID].ALLMEMBERS) }} 
            DIMENSION PROPERTIES MEMBER_CAPTION, MEMBER_UNIQUE_NAME 
        ON ROWS 
        FROM ( 
            SELECT ({{ [Time Crate].[CR_Date].&[{start_date.strftime("%Y-%m-%dT00:00:00")}] : 
                        [Time Crate].[CR_Date].&[{end_date.strftime("%Y-%m-%dT00:00:00")}] }}) 
            ON COLUMNS 
        FROM ( 
            SELECT ({{ [Production Type].[Production Type Hierarchy].[Lot Type／Scheduled].&[M-Scheduled], 
                        [Production Type].[Production Type Hierarchy].[SubType].&[F-Engineering]}}) 
                        ON COLUMNS 
            FROM [PPD_Actual]
        ) )
        WHERE ( [Defect Tracking].[Defect Group].&[M_Melt Loss] ) 
        CELL PROPERTIES VALUE, BACK_COLOR, FORE_COLOR, FORMATTED_VALUE, FORMAT_STRING, FONT_NAME, FONT_SIZE, FONT_FLAGS
    """

    # 查詢 Finishing Loss
    query_f = f"""
        SELECT NON EMPTY {{ [Measures].[F_Defect Loss%] }} ON COLUMNS, 
            NON EMPTY {{ ([Time Crate].[CR_Time YQMD].[CR_Date].ALLMEMBERS * 
                            [Finishing Source Tank].[Source Tank ID].&[{tank}] *
                            [Defect Tracking].[Defect ID].[Defect ID].ALLMEMBERS) }} 
            DIMENSION PROPERTIES MEMBER_CAPTION, MEMBER_UNIQUE_NAME 
        ON ROWS 
        FROM ( 
            SELECT (
                {{ [Defect Tracking].[Defect ID].&[165], 
                [Defect Tracking].[Defect ID].&[1028], 
                [Defect Tracking].[Defect ID].&[311], 
                [Defect Tracking].[Defect ID].&[252], 
                [Defect Tracking].[Defect ID].&[407], 
                [Defect Tracking].[Defect ID].&[171], 
                [Defect Tracking].[Defect ID].&[838], 
                [Defect Tracking].[Defect ID].&[169], 
                [Defect Tracking].[Defect ID].&[836], 
                [Defect Tracking].[Defect ID].&[167], 
                [Defect Tracking].[Defect ID].&[834], 
                [Defect Tracking].[Defect ID].&[170], 
                [Defect Tracking].[Defect ID].&[837], 
                [Defect Tracking].[Defect ID].&[168], 
                [Defect Tracking].[Defect ID].&[835] }} 
        ) ON COLUMNS 
        FROM ( 
            SELECT ({{ [Time Crate].[CR_Date].&[{start_date.strftime("%Y-%m-%dT00:00:00")}] : 
                        [Time Crate].[CR_Date].&[{end_date.strftime("%Y-%m-%dT00:00:00")}] }}) 
            ON COLUMNS 
        FROM ( 
            SELECT ({{ [Production Type].[Production Type Hierarchy].[Lot Type／Scheduled].&[F-Normal], 
                        [Production Type].[Production Type Hierarchy].[SubType].&[F-Div], 
                        [Production Type].[Production Type Hierarchy].[SubType].&[F-Engineering], 
                        [Production Type].[Production Type Hierarchy].[SubType].&[F-Plant] }}) 
                        ON COLUMNS 
            FROM [PPD_Actual]
        ) )
        WHERE ( [Time Crate].[CR_Date].CurrentMember ) )
        CELL PROPERTIES VALUE, BACK_COLOR, FORE_COLOR, FORMATTED_VALUE, FORMAT_STRING, FONT_NAME, FONT_SIZE, FONT_FLAGS
    """

    try:
        # 數據清理
        df_cleaned_M = clean_data(get_PPD(query_m))
        df_cleaned_F = clean_data(get_PPD(query_f))
        # 將數據轉成字典返回
        return df_cleaned_M.to_dict("records"), df_cleaned_F.to_dict("records")
        
    except Exception as e:
        print("Error occurred during query execution:")
        print(e)
        return [], []
