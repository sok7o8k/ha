import dash
from dash import dcc, html, Input, Output
import pandas as pd
import plotly.graph_objs as go

# 初始化 Dash 應用
app = dash.Dash(__name__)

# 模擬 Tank ID 選項
tank_ids = [f"TC{i:02}" for i in range(1, 22)]

# 前端佈局
app.layout = html.Div([
    html.H1("Defect Loss% Dashboard"),
    
    dcc.DatePickerRange(
        id='date-picker',
        start_date='2023-01-01',
        end_date='2024-12-31',
        display_format='YYYY-MM-DD',
        style={'margin': '10px'}
    ),
    
    dcc.Dropdown(
        id='tank-picker',
        options=[{'label': tank, 'value': tank} for tank in tank_ids],
        value=tank_ids,  # 預設選擇所有 Tank
        multi=True,
        style={'margin': '10px'}
    ),
    
    dcc.Graph(id='defect-loss-graph'),
])

# 更新圖表的回調函數
@app.callback(
    Output('defect-loss-graph', 'figure'),
    Input('date-picker', 'start_date'),
    Input('date-picker', 'end_date'),
    Input('tank-picker', 'value'),
)
def update_graph(start_date, end_date, selected_tanks):
    # 生成 MDX 查詢
    tank_filter = ', '.join([f'[Tank].[Tank ID].&[{tank}]' for tank in selected_tanks])
    query_M = f"""
    SELECT NON EMPTY {{ [Measures].[M_Defect Loss%] }} ON COLUMNS,
    NON EMPTY {{
        ([Time Crate].[CR_Time YQMD].[CR_Date].ALLMEMBERS *
         {tank_filter} *
         [Defect Tracking].[Defect ID].[Defect ID].ALLMEMBERS)
    }} DIMENSION PROPERTIES MEMBER_CAPTION, MEMBER_UNIQUE_NAME ON ROWS
    FROM (
        SELECT ({{ [Defect Tracking].[Defect Group].&[M_Melt Loss] }}) ON COLUMNS
        FROM (
            SELECT ({{ [Time Crate].[CR_Date].&[{start_date}], [Time Crate].[CR_Date].&[{end_date}] }}) ON COLUMNS 
            FROM [PPD_Actual]
        )
    )
    WHERE ([Time Crate].[CR_Date].CurrentMember, [Defect Tracking].[Defect Group].&[M_Melt Loss])
    CELL PROPERTIES VALUE
    """

    # 這裡您應該連接到數據庫並執行查詢，以下是模擬數據
    # 假設有以下數據：
    date_rng = pd.date_range(start=start_date, end=end_date, freq='D')
    data = {
        'Date': date_rng,
        'Defect Loss%': [abs(hash(date) % 10) for date in date_rng]  # 模擬缺陷損失百分比數據
    }
    df = pd.DataFrame(data)

    # 繪製圖表
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=df['Date'], y=df['Defect Loss%'], mode='lines+markers', name='Defect Loss%'))

    fig.update_layout(title="Defect Loss% Over Time", xaxis_title="Date", yaxis_title="Defect Loss%", showlegend=True)
    
    return fig

# 運行 Dash 應用
if __name__ == '__main__':
    app.run_server(debug=True)
