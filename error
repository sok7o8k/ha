import dash
from dash import dcc, html, Input, Output
import pandas as pd
from pyadomd import Pyadomd

# 初始化 Dash 應用程序
app = dash.Dash(__name__)

# Adomd 連接字串
conn_str = "Provider=MSOLAP;Data Source=cgtppd;Catalog=ppd;"

# Tank ID 選項列表
tank_options = [
    {"label": f"TC{i:02d}", "value": f"TC{i:02d}"} for i in range(1, 22)
]

# App Layout
app.layout = html.Div([
    html.H1("Defect Loss Dashboard"),
    html.Div([
        html.Label("Select Tank ID:"),
        dcc.Dropdown(
            id="tank-picker",
            options=tank_options,
            value="TC01",  # 預設值
            clearable=False
        ),
    ]),
    html.Div([
        html.Label("Select Date Range:"),
        dcc.DatePickerRange(
            id="date-picker",
            start_date=pd.Timestamp.now().strftime("%Y-%m-%d"),
            end_date=pd.Timestamp.now().strftime("%Y-%m-%d"),
            display_format="YYYY-MM-DD",
        ),
    ]),
    html.Br(),
    html.Div(id="query-output", children=[]),
])

# 查詢數據函數
def query_data(tank, start_date, end_date):
    query = f"""
    SELECT NON EMPTY {{ [Measures].[M_Defect Loss%] }} ON COLUMNS, 
           NON EMPTY {{ ([Time Crate].[CR_Time YQMD].[CR_Date].ALLMEMBERS * 
                         [Tank].[Tank ID].[Tank ID].&[{tank}] *
                         [Defect Tracking].[Defect ID].[Defect ID].ALLMEMBERS) }} 
           DIMENSION PROPERTIES MEMBER_CAPTION, MEMBER_UNIQUE_NAME 
    ON ROWS 
    FROM ( SELECT ({{ [Time Crate].[CR_Date].&[{start_date}] :
                         [Time Crate].[CR_Date].&[{end_date}] }}) 
           ON COLUMNS 
           FROM [PPD_Actual]) 
    WHERE ([Tank].[Tank ID].[Tank ID].&[{tank}])
    CELL PROPERTIES VALUE
    """
    with Pyadomd(conn_str) as conn:
        with conn.cursor().execute(query) as cur:
            df = pd.DataFrame(cur.fetchall(), columns=[col.name for col in cur.description])
    return df

# 回調函數
@app.callback(
    Output("query-output", "children"),
    [Input("tank-picker", "value"),
     Input("date-picker", "start_date"),
     Input("date-picker", "end_date")]
)
def update_output(tank, start_date, end_date):
    if not tank or not start_date or not end_date:
        return "Please select all inputs."

    # 查詢數據
    df = query_data(tank, start_date, end_date)

    if df.empty:
        return "No data found for the selected Tank ID and date range."

    # 顯示數據表格
    return html.Div([
        html.H4(f"Results for Tank {tank} from {start_date} to {end_date}:"),
        dcc.Graph(
            figure={
                "data": [
                    {
                        "x": df["CR_Date"], 
                        "y": df["M_Defect Loss%"], 
                        "type": "bar", 
                        "name": "Defect Loss"
                    }
                ],
                "layout": {"title": "Defect Loss Over Time"}
            }
        )
    ])

# 運行應用
if __name__ == "__main__":
    app.run_server(debug=True)
