from dash import dcc, html
import dash_bootstrap_components as dbc
import pandas as pd
import io
import base64

# 創建 Dash 應用
app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP, dbc.icons.BOOTSTRAP])

app.layout = dbc.Container([
    # 其他 layout 元件...

    # 加入匯出按鈕
    dbc.Row([
        dbc.Col([
            dbc.Button("匯出原始數據", id="export-button", color="primary", className="mb-3"),
            dcc.Download(id="download-dataframe-csv"),  # 用於下載數據的組件
        ], width=4),
    ]),
])

@app.callback(
    Output("download-dataframe-csv", "data"),
    Input("export-button", "n_clicks"),
    State("tags", "value"),
    State("date-picker", "start_date"),
    State("date-picker", "end_date"),
    State("interval", "value"),
    prevent_initial_call=True
)
def export_data(n_clicks, tags, start_date, end_date, interval):
    # 如果未選擇標籤或日期範圍，則不進行匯出
    if not tags or not start_date or not end_date:
        raise PreventUpdate

    # 設置PI伺服器並提取選定的數據
    start_date = pd.to_datetime(start_date)
    end_date = pd.to_datetime(end_date)
    servername = "grape"
    
    with PI.PIServer(server=servername) as server:
        points = server.search(tags)
        series = []
        for p in points:
            data = p.interpolated_values(
                start_time=start_date,
                end_time=end_date,
                interval='30m'
            )
            interpolated_data = pd.DataFrame(data).reset_index()
            interpolated_data.columns = ['Timestamp', p.name]
            interpolated_data['Timestamp'] = pd.to_datetime(interpolated_data['Timestamp'])
            interpolated_data.set_index('Timestamp', inplace=True)
            
            # 根據間隔重新取樣
            if interval == 'd':
                resampled_data = interpolated_data.resample('1D').mean()
            elif interval == 'h':
                resampled_data = interpolated_data.resample('1H').mean()
            else:
                resampled_data = interpolated_data

            series.append(resampled_data)
        
        # 合併所有選定 PI tags 的數據
        df_export = pd.concat(series, axis=1)
    
    # 將 DataFrame 轉換為 CSV 文件
    csv_buffer = io.StringIO()
    df_export.to_csv(csv_buffer)
    csv_buffer.seek(0)
    csv_data = csv_buffer.getvalue()
    b64 = base64.b64encode(csv_data.encode()).decode()

    # 生成下載鏈接
    return dict(
        content=b64,
        filename="exported_data.csv",
        mime_type="text/csv"
    )

if __name__ == '__main__':
    app.run_server(debug=True, port='7788')


