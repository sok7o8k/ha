import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import plotly.graph_objects as go

# 创建 Dash app
app = dash.Dash(__name__)

# 初始图表对象
fig = go.Figure()

# 添加条形图 (y 轴在左边)
fig.add_trace(go.Bar(
    x=[1, 2, 3, 4],
    y=[10, 20, 30, 40],
    name="Bar Chart",
    yaxis='y'
))

# 初始布局
fig.update_layout(
    yaxis=dict(title="Bar Chart Y Axis", titlefont=dict(color="blue"), tickfont=dict(color="blue")),
    xaxis=dict(title="X Axis"),
    dragmode='zoom'
)

# 定义 app 布局
app.layout = html.Div([
    dcc.Dropdown(
        id='axis-selector',
        options=[
            {'label': 'Line Chart 1', 'value': 'line1'},
            {'label': 'Line Chart 2', 'value': 'line2'},
            {'label': 'Line Chart 3', 'value': 'line3'},
            {'label': 'Line Chart 4', 'value': 'line4'},
            {'label': 'Line Chart 5', 'value': 'line5'},
        ],
        multi=True,
        placeholder="Select line charts to add"
    ),
    dcc.Graph(id='example-graph', figure=fig)
])

# 更新图表回调函数
@app.callback(
    Output('example-graph', 'figure'),
    [Input('axis-selector', 'value')]
)
def update_graph(selected_values):
    # 创建新的图形对象
    fig = go.Figure()

    # 添加条形图 (y 轴在左边)
    fig.add_trace(go.Bar(
        x=[1, 2, 3, 4],
        y=[10, 20, 30, 40],
        name="Bar Chart",
        yaxis='y'
    ))

    # 添加用户选择的折线图
    if selected_values:
        # 不同折线图的数据
        lines = {
            'line1': ([100, 200, 300, 400], "Line Chart 1", 'y2', "green", 0.85),
            'line2': ([150, 250, 350, 450], "Line Chart 2", 'y3', "red", 0.9),
            'line3': ([120, 220, 320, 420], "Line Chart 3", 'y4', "purple", 0.95),
            'line4': ([110, 210, 310, 410], "Line Chart 4", 'y5', "orange", 1.0),
            'line5': ([130, 230, 330, 430], "Line Chart 5", 'y6', "brown", 1.05),
        }

        for value in selected_values:
            data, name, axis, color, pos = lines[value]
            fig.add_trace(go.Scatter(
                x=[1, 2, 3, 4],
                y=data,
                name=name,
                yaxis=axis
            ))

            # 动态添加 y 轴
            fig.update_layout({
                axis: dict(
                    title=name + " Y Axis",
                    titlefont=dict(color=color),
                    tickfont=dict(color=color),
                    overlaying='y',
                    side='right',
                    position=pos
                )
            })

    # 更新布局
    fig.update_layout(
        yaxis=dict(title="Bar Chart Y Axis", titlefont=dict(color="blue"), tickfont=dict(color="blue")),
        xaxis=dict(title="X Axis"),
        dragmode='zoom'
    )

    return fig

# 运行 app
if __name__ == '__main__':
    app.run_server(debug=True)
