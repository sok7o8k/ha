def column_exists(table_name, column_name):
    query = f"""
        SELECT COLUMN_NAME
        FROM INFORMATION_SCHEMA.COLUMNS
        WHERE TABLE_NAME = '{table_name.split('.')[-1]}'
        AND COLUMN_NAME = '{column_name}'
    """
    result_df = get_server(query, 'TCF11SQL2011', 'PI_REPLICATION')
    return not result_df.empty

def get_tag_data_from_sql(tag, start_date, end_date, interval):
    # 根據 interval 選擇不同的資料表
    if interval == "d":
        tables = ["PI_REPLICATION.dbo.Summary_Daily_AVG_TC_PEM_Melting_1",
                  "PI_REPLICATION.dbo.Summary_Daily_AVG_TC_PEM_Melting_2"]
    elif interval == "h":
        tables = ["PI_REPLICATION.dbo.Summary_Hour_AVG_TC_PEM_Melting_1",
                  "PI_REPLICATION.dbo.Summary_Hour_AVG_TC_PEM_Melting_2"]
    else:
        raise ValueError("Unsupported interval for SQL data retrieval")

    all_data = []
    for table_name in tables:
        # 確認欄位是否存在
        if not column_exists(table_name, tag):
            print(f"Column '{tag}' does not exist in table '{table_name}'")
            continue  # 跳過該表，繼續檢查其他表

        query = f"""
            SELECT Data_Time, [{tag}] AS Value
            FROM {table_name}
            WHERE Data_Time BETWEEN '{start_date}' AND '{end_date}'
            ORDER BY Data_Time
        """
        data = get_server(query, 'TCF11SQL2011', 'PI_REPLICATION')
        all_data.append(data)

    if not all_data:
        raise ValueError(f"No data found for tag '{tag}' in the specified date range.")
    
    # 合併所有表格的數據
    df = pd.concat(all_data)
    df['Data_Time'] = pd.to_datetime(df['Data_Time'])
    df.set_index('Data_Time', inplace=True)

    # 根據 interval 重新取樣數據
    interval_mapping = {"d": "1D", "h": "1H", "m": "1T"}
    resampled_data = df.resample(interval_mapping[interval]).mean()
    
    return resampled_data
